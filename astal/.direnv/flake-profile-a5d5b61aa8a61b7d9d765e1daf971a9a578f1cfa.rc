unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
BASH='/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin/bash'
CONFIG_SHELL='/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin/bash'
export CONFIG_SHELL
GDK_PIXBUF_MODULE_FILE='/nix/store/gcxbz86fjnjsasf3dcp0ap988142mvir-librsvg-2.58.3/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache'
export GDK_PIXBUF_MODULE_FILE
GETTEXTDATADIRS='/nix/store/m4454h58k2jyrpz9r96zby1aid2fv9qd-gettext-0.22.5/share/gettext:/nix/store/qap69prdblhm5k4zkrqjk42zifyig2pb-glib-2.82.4/share/gettext:/nix/store/v5kvchqkly9qkcgfyjzv6xz05xbls87d-gtk+3-3.24.43/share/gettext'
export GETTEXTDATADIRS
GETTEXTDATADIRS_FOR_BUILD='/nix/store/m4454h58k2jyrpz9r96zby1aid2fv9qd-gettext-0.22.5/share/gettext:/nix/store/qap69prdblhm5k4zkrqjk42zifyig2pb-glib-2.82.4/share/gettext:/nix/store/v5kvchqkly9qkcgfyjzv6xz05xbls87d-gtk+3-3.24.43/share/gettext'
export GETTEXTDATADIRS_FOR_BUILD
GI_TYPELIB_PATH='/nix/store/qap69prdblhm5k4zkrqjk42zifyig2pb-glib-2.82.4/lib/girepository-1.0:/nix/store/n20nf5am8arwr72lwq4r68csknb2g4w3-at-spi2-core-2.54.0/lib/girepository-1.0:/nix/store/y26w2bicwqhly2cd9y2am0sjmgp577cx-gdk-pixbuf-2.42.12/lib/girepository-1.0:/nix/store/27jfvn02kzw8kbhvb2i5g9wbp6pc8c2h-gsettings-desktop-schemas-47.1/lib/girepository-1.0:/nix/store/min54ia8knrqvmq8xi6v6mqs3fydmhp2-harfbuzz-10.1.0/lib/girepository-1.0:/nix/store/w37y803wqd8lqilhy558ylb3gd78s5ak-pango-1.55.5/lib/girepository-1.0:/nix/store/v5kvchqkly9qkcgfyjzv6xz05xbls87d-gtk+3-3.24.43/lib/girepository-1.0:/nix/store/gcxbz86fjnjsasf3dcp0ap988142mvir-librsvg-2.58.3/lib/girepository-1.0:/nix/store/dxb8mgx08cqbapdm8ppx39m25f18hfqb-gobject-introspection-wrapped-1.82.0/lib/girepository-1.0:/nix/store/18fznbkn56msf7ir1bcw258fj6pdc3zf-gobject-introspection-1.82.0/lib/girepository-1.0:/nix/store/psmkmzxj1pkblc3pfizkqp70acf624ja-json-glib-1.10.6/lib/girepository-1.0:/nix/store/lpbs46y8s3m023r8w4v6i88rvmwwks4y-astal-apps-0.1.0/lib/girepository-1.0:/nix/store/m17gs6llxisjxgxlc72z6dslh8s4ipgz-astal-battery-0.1.0/lib/girepository-1.0:/nix/store/42fhmy15z8sfgr7i9vi37gny7vsc7mb2-astal-0.1.0/lib/girepository-1.0:/nix/store/piv7lk1w5yg5qck0vj7w2qmcd5ljpddl-wireplumber-0.5.7/lib/girepository-1.0:/nix/store/sawsq7csc7w14l74c08yxx7fz2gxbvpp-astal-wireplumber-0.1.0/lib/girepository-1.0:/nix/store/0ix7pq2z91ycdd408az43chfja9l0rdk-astal-bluetooth-0.1.0/lib/girepository-1.0:/nix/store/icl2r8jfwrvq6inilx92k8b6kn14dcd9-astal-hyprland-0.1.0/lib/girepository-1.0:/nix/store/fg5f3wsaigd33kyl94frki83wa56yzl5-astal-mpris-0.1.0/lib/girepository-1.0:/nix/store/9hilz8ngmh6i8i1xzrvd6yifdkvw1n4x-networkmanager-1.48.10/lib/girepository-1.0:/nix/store/jvg7gpsyvaw5ywgx1h3pwmciwnx5kwrb-astal-network-0.1.0/lib/girepository-1.0:/nix/store/3ab1anl0rbncfd9rgd4pj0d676svfi6s-astal-notifd-0.1.0/lib/girepository-1.0:/nix/store/v58sy7cdv52jf0mzadgrkxjq6b60vmgs-appmenu-glib-translator-24.05/lib/girepository-1.0:/nix/store/p6aigc217qrm4lsmlxrkw29gzsr0yh0w-astal-tray-0.1.0/lib/girepository-1.0:/nix/store/3z9rj478wia1nd3a7gihz1f6rkcn9bnq-gtk-layer-shell-0.9.0/lib/girepository-1.0:/nix/store/j4p3kyv1kyzl8sz3s10q43f46ba9iyag-astal3-3.0.0/lib/girepository-1.0'
export GI_TYPELIB_PATH
GSETTINGS_SCHEMAS_PATH='/nix/store/27jfvn02kzw8kbhvb2i5g9wbp6pc8c2h-gsettings-desktop-schemas-47.1/share/gsettings-schemas/gsettings-desktop-schemas-47.1:/nix/store/v5kvchqkly9qkcgfyjzv6xz05xbls87d-gtk+3-3.24.43/share/gsettings-schemas/gtk+3-3.24.43:/nix/store/5ajn5k3ma2gaqvwib57zn11041pm7b88-gvfs-1.56.1/share/gsettings-schemas/gvfs-1.56.1'
export GSETTINGS_SCHEMAS_PATH
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/jbhdy65rbla5zrkh5rmrsqnrbb5rczzr-glib-2.82.4-dev/bin:/nix/store/m4454h58k2jyrpz9r96zby1aid2fv9qd-gettext-0.22.5/bin:/nix/store/qb9innj2gpaqv34mw7yddc0b8w7ayhy8-glib-2.82.4-bin/bin:/nix/store/9sha10y5190i1lfqbc5n611h4xd850ac-gdk-pixbuf-2.42.12-dev/bin:/nix/store/3mn95s8wl54xyvf9gp1mbg5hmv7f0cp5-libdeflate-1.23/bin:/nix/store/qbq5fq550dqnn9r14clvlfdn3bbx0zj7-libjpeg-turbo-3.0.4-bin/bin:/nix/store/lry4jjli823qw68xarjlfqf4vx9bzdix-libwebp-1.5.0/bin:/nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin/bin:/nix/store/sh9j0jqldx78pdi8cw672fm79lbdhs6g-zstd-1.5.6-bin/bin:/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/bin:/nix/store/s3kk6fy51ygkfayhlgqcl4652w8s8ah2-libtiff-4.7.0-bin/bin:/nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/bin:/nix/store/y26w2bicwqhly2cd9y2am0sjmgp577cx-gdk-pixbuf-2.42.12/bin:/nix/store/3aa3sws2gxg0jhhchdl2gn0kylxwl4wb-cairo-1.18.2-dev/bin:/nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/bin:/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin/bin:/nix/store/nf35c6arwgbny5qv956yb369gp3g7xjl-brotli-1.1.0/bin:/nix/store/7z9ki4d55828iiqydf190fkbplyn1i12-fontconfig-2.15.0-bin/bin:/nix/store/gcxbz86fjnjsasf3dcp0ap988142mvir-librsvg-2.58.3/bin:/nix/store/5432m2b9nzij5g0lb2v8i6rj9g1hywdx-gtk+3-3.24.43-dev/bin:/nix/store/j2y38dvshlwsscsmjswra1fxssiqkc6z-expat-2.6.4-dev/bin:/nix/store/687mdvx2ndxdlbpxyjcjz160qmk3axak-dbus-1.14.10-lib/bin:/nix/store/sc2vj3101xz24yq1inrjqladw88c5s21-dbus-1.14.10/bin:/nix/store/zkm4lblly44srrfsrj0i6lbscvvribir-fribidi-1.0.16/bin:/nix/store/vfbwnc5h21hhv2dac5cavh4wzidxklsi-harfbuzz-10.1.0-dev/bin:/nix/store/0vdxx9vsgkpczrl4xzkcm6kiw73zrh7p-graphite2-1.3.14/bin:/nix/store/lvm7qnl7389i7ilmgavjam52ni39jhs4-pango-1.55.5-bin/bin:/nix/store/bmy9bs4ikr416v6k398y5rqhwm29x2li-cups-2.4.11-dev/bin:/nix/store/5b6fdrx11rq2b2r9m7bnxknh72sj5ndq-cups-2.4.11/bin:/nix/store/v5kvchqkly9qkcgfyjzv6xz05xbls87d-gtk+3-3.24.43/bin:/nix/store/87saq49nzawvc15wxdfmd6g5sa5xn3bj-gobject-introspection-1.82.0-dev/bin:/nix/store/ksb6gs9rl47jby495xbg93ggvi21r1km-dart-sass-1.83.4/bin:/nix/store/psmkmzxj1pkblc3pfizkqp70acf624ja-json-glib-1.10.6/bin:/nix/store/lpbs46y8s3m023r8w4v6i88rvmwwks4y-astal-apps-0.1.0/bin:/nix/store/m17gs6llxisjxgxlc72z6dslh8s4ipgz-astal-battery-0.1.0/bin:/nix/store/42fhmy15z8sfgr7i9vi37gny7vsc7mb2-astal-0.1.0/bin:/nix/store/piv7lk1w5yg5qck0vj7w2qmcd5ljpddl-wireplumber-0.5.7/bin:/nix/store/icl2r8jfwrvq6inilx92k8b6kn14dcd9-astal-hyprland-0.1.0/bin:/nix/store/fg5f3wsaigd33kyl94frki83wa56yzl5-astal-mpris-0.1.0/bin:/nix/store/zza416w472fzgfykddw0z3wx1wjpasy5-nettle-3.10.1-dev/bin:/nix/store/pywswr12z3ik766l7wzqnbhvfs1m53rn-gnutls-3.8.6-bin/bin:/nix/store/3n8w2lgskgj315yjcdq62d7di6mvfvwj-libgcrypt-1.10.3-dev/bin:/nix/store/vl9jrkb95lycp1pnjay4mi44gk9ims6c-libgcrypt-1.10.3-bin/bin:/nix/store/9hilz8ngmh6i8i1xzrvd6yifdkvw1n4x-networkmanager-1.48.10/bin:/nix/store/3ab1anl0rbncfd9rgd4pj0d676svfi6s-astal-notifd-0.1.0/bin:/nix/store/p6aigc217qrm4lsmlxrkw29gzsr0yh0w-astal-tray-0.1.0/bin:/nix/store/wny3s9glxhiphdqiqyql39zrxkxpir3j-lua-5.2.4-env/bin:/nix/store/pw26z7msfmv291jq1qpp8bbaprs5hkfk-coreutils-9.5/bin:/nix/store/pvl69q0l5fiiblvsqz3l424617b7lw89-findutils-4.10.0/bin:/nix/store/nyqfk1jvmg3dzbp0n89x7957m3qh4ks4-diffutils-3.10/bin:/nix/store/v93bdqf52x2r2lqijv0f7x3yhylwy957-gnused-4.9/bin:/nix/store/01dri6m7g4bx0kkd39pkgfpzpj3i7y86-gnugrep-3.11/bin:/nix/store/2yvf4zm225q75mkma7914f4k7i0srfmg-gawk-5.3.1/bin:/nix/store/s6zpdhyi00867afvsyg8hf54q5llkffl-gnutar-1.35/bin:/nix/store/3ixlnrilky99c34xw3w69xyx54iahwcr-gzip-1.13/bin:/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin/bin:/nix/store/0lrk3s24y2l74zagz13mv0n7yp8zbqzg-gnumake-4.4.1/bin:/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin:/nix/store/78z7sr6w7jv856axivb9fxwivklvaivf-patch-2.7.6/bin:/nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin/bin:/nix/store/qh8jxbp98py266w8555hx4y9qpxfrfz0-file-5.46/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LINENO='76'
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BUILD_CORES='12'
export NIX_BUILD_CORES
NIX_CFLAGS_COMPILE=' -frandom-seed=57kpza8i47'
export NIX_CFLAGS_COMPILE
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_LDFLAGS='-rpath /home/nico/.dotfiles/astal/outputs/out/lib '
export NIX_LDFLAGS
NIX_NO_SELF_RPATH='1'
NIX_STORE='/nix/store'
export NIX_STORE
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/5432m2b9nzij5g0lb2v8i6rj9g1hywdx-gtk+3-3.24.43-dev/bin:/nix/store/j2y38dvshlwsscsmjswra1fxssiqkc6z-expat-2.6.4-dev/bin:/nix/store/687mdvx2ndxdlbpxyjcjz160qmk3axak-dbus-1.14.10-lib/bin:/nix/store/sc2vj3101xz24yq1inrjqladw88c5s21-dbus-1.14.10/bin:/nix/store/jbhdy65rbla5zrkh5rmrsqnrbb5rczzr-glib-2.82.4-dev/bin:/nix/store/m4454h58k2jyrpz9r96zby1aid2fv9qd-gettext-0.22.5/bin:/nix/store/qb9innj2gpaqv34mw7yddc0b8w7ayhy8-glib-2.82.4-bin/bin:/nix/store/3aa3sws2gxg0jhhchdl2gn0kylxwl4wb-cairo-1.18.2-dev/bin:/nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/bin:/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin/bin:/nix/store/nf35c6arwgbny5qv956yb369gp3g7xjl-brotli-1.1.0/bin:/nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/bin:/nix/store/7z9ki4d55828iiqydf190fkbplyn1i12-fontconfig-2.15.0-bin/bin:/nix/store/zkm4lblly44srrfsrj0i6lbscvvribir-fribidi-1.0.16/bin:/nix/store/9sha10y5190i1lfqbc5n611h4xd850ac-gdk-pixbuf-2.42.12-dev/bin:/nix/store/3mn95s8wl54xyvf9gp1mbg5hmv7f0cp5-libdeflate-1.23/bin:/nix/store/qbq5fq550dqnn9r14clvlfdn3bbx0zj7-libjpeg-turbo-3.0.4-bin/bin:/nix/store/lry4jjli823qw68xarjlfqf4vx9bzdix-libwebp-1.5.0/bin:/nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin/bin:/nix/store/sh9j0jqldx78pdi8cw672fm79lbdhs6g-zstd-1.5.6-bin/bin:/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/bin:/nix/store/s3kk6fy51ygkfayhlgqcl4652w8s8ah2-libtiff-4.7.0-bin/bin:/nix/store/y26w2bicwqhly2cd9y2am0sjmgp577cx-gdk-pixbuf-2.42.12/bin:/nix/store/vfbwnc5h21hhv2dac5cavh4wzidxklsi-harfbuzz-10.1.0-dev/bin:/nix/store/0vdxx9vsgkpczrl4xzkcm6kiw73zrh7p-graphite2-1.3.14/bin:/nix/store/lvm7qnl7389i7ilmgavjam52ni39jhs4-pango-1.55.5-bin/bin:/nix/store/bmy9bs4ikr416v6k398y5rqhwm29x2li-cups-2.4.11-dev/bin:/nix/store/5b6fdrx11rq2b2r9m7bnxknh72sj5ndq-cups-2.4.11/bin:/nix/store/v5kvchqkly9qkcgfyjzv6xz05xbls87d-gtk+3-3.24.43/bin:/nix/store/gcxbz86fjnjsasf3dcp0ap988142mvir-librsvg-2.58.3/bin:/nix/store/vdzb7m25r8plq2rs4v71g19hf9qf4qw1-gobject-introspection-wrapped-1.82.0-dev/bin:/nix/store/bl9vwzyawyad6ldhvnnp28drzjm7q0v9-patchelf-0.15.0/bin:/nix/store/87saq49nzawvc15wxdfmd6g5sa5xn3bj-gobject-introspection-1.82.0-dev/bin:/nix/store/ksb6gs9rl47jby495xbg93ggvi21r1km-dart-sass-1.83.4/bin:/nix/store/psmkmzxj1pkblc3pfizkqp70acf624ja-json-glib-1.10.6/bin:/nix/store/lpbs46y8s3m023r8w4v6i88rvmwwks4y-astal-apps-0.1.0/bin:/nix/store/m17gs6llxisjxgxlc72z6dslh8s4ipgz-astal-battery-0.1.0/bin:/nix/store/42fhmy15z8sfgr7i9vi37gny7vsc7mb2-astal-0.1.0/bin:/nix/store/piv7lk1w5yg5qck0vj7w2qmcd5ljpddl-wireplumber-0.5.7/bin:/nix/store/icl2r8jfwrvq6inilx92k8b6kn14dcd9-astal-hyprland-0.1.0/bin:/nix/store/fg5f3wsaigd33kyl94frki83wa56yzl5-astal-mpris-0.1.0/bin:/nix/store/zza416w472fzgfykddw0z3wx1wjpasy5-nettle-3.10.1-dev/bin:/nix/store/pywswr12z3ik766l7wzqnbhvfs1m53rn-gnutls-3.8.6-bin/bin:/nix/store/3n8w2lgskgj315yjcdq62d7di6mvfvwj-libgcrypt-1.10.3-dev/bin:/nix/store/vl9jrkb95lycp1pnjay4mi44gk9ims6c-libgcrypt-1.10.3-bin/bin:/nix/store/9hilz8ngmh6i8i1xzrvd6yifdkvw1n4x-networkmanager-1.48.10/bin:/nix/store/3ab1anl0rbncfd9rgd4pj0d676svfi6s-astal-notifd-0.1.0/bin:/nix/store/p6aigc217qrm4lsmlxrkw29gzsr0yh0w-astal-tray-0.1.0/bin:/nix/store/wny3s9glxhiphdqiqyql39zrxkxpir3j-lua-5.2.4-env/bin:/nix/store/pw26z7msfmv291jq1qpp8bbaprs5hkfk-coreutils-9.5/bin:/nix/store/pvl69q0l5fiiblvsqz3l424617b7lw89-findutils-4.10.0/bin:/nix/store/nyqfk1jvmg3dzbp0n89x7957m3qh4ks4-diffutils-3.10/bin:/nix/store/v93bdqf52x2r2lqijv0f7x3yhylwy957-gnused-4.9/bin:/nix/store/01dri6m7g4bx0kkd39pkgfpzpj3i7y86-gnugrep-3.11/bin:/nix/store/2yvf4zm225q75mkma7914f4k7i0srfmg-gawk-5.3.1/bin:/nix/store/s6zpdhyi00867afvsyg8hf54q5llkffl-gnutar-1.35/bin:/nix/store/3ixlnrilky99c34xw3w69xyx54iahwcr-gzip-1.13/bin:/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin/bin:/nix/store/0lrk3s24y2l74zagz13mv0n7yp8zbqzg-gnumake-4.4.1/bin:/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin:/nix/store/78z7sr6w7jv856axivb9fxwivklvaivf-patch-2.7.6/bin:/nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin/bin:/nix/store/qh8jxbp98py266w8555hx4y9qpxfrfz0-file-5.46/bin'
export PATH
PS4='+ '
SHELL='/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin/bash'
export SHELL
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
XDG_DATA_DIRS='/nix/store/5432m2b9nzij5g0lb2v8i6rj9g1hywdx-gtk+3-3.24.43-dev/share:/nix/store/mlrsq8qld7n4w4kszsvdqjr16zyz5qyq-at-spi2-core-2.54.0-dev/share:/nix/store/j2y38dvshlwsscsmjswra1fxssiqkc6z-expat-2.6.4-dev/share:/nix/store/85m8a1905jksv2s8xj1hn23dasimih87-expat-2.6.4/share:/nix/store/sc2vj3101xz24yq1inrjqladw88c5s21-dbus-1.14.10/share:/nix/store/jbhdy65rbla5zrkh5rmrsqnrbb5rczzr-glib-2.82.4-dev/share:/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1/share:/nix/store/m4454h58k2jyrpz9r96zby1aid2fv9qd-gettext-0.22.5/share:/nix/store/qb9innj2gpaqv34mw7yddc0b8w7ayhy8-glib-2.82.4-bin/share:/nix/store/qap69prdblhm5k4zkrqjk42zifyig2pb-glib-2.82.4/share:/nix/store/n20nf5am8arwr72lwq4r68csknb2g4w3-at-spi2-core-2.54.0/share:/nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/share:/nix/store/nf35c6arwgbny5qv956yb369gp3g7xjl-brotli-1.1.0/share:/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3/share:/nix/store/7z9ki4d55828iiqydf190fkbplyn1i12-fontconfig-2.15.0-bin/share:/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib/share:/nix/store/b0w4jcxry1hc1yqfg7g6289jc3j7fwnq-xorgproto-2024.1/share:/nix/store/a58z7g7bv4fxfkvaji2s9jnadfgprv44-libXau-1.0.12/share:/nix/store/36ybrb8mfqbvq0irggdqhd85iqabfmk9-libX11-1.8.10/share:/nix/store/9sha10y5190i1lfqbc5n611h4xd850ac-gdk-pixbuf-2.42.12-dev/share:/nix/store/lry4jjli823qw68xarjlfqf4vx9bzdix-libwebp-1.5.0/share:/nix/store/z5lfnj2msazj5s9plcrzi3qbfr2xn8da-xz-5.6.3/share:/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/share:/nix/store/y26w2bicwqhly2cd9y2am0sjmgp577cx-gdk-pixbuf-2.42.12/share:/nix/store/27jfvn02kzw8kbhvb2i5g9wbp6pc8c2h-gsettings-desktop-schemas-47.1/share:/nix/store/c24k2mkwfm92fch1n5pin26j21kcpd8p-libXfixes-6.0.1/share:/nix/store/2prmm1avzc88k03c7345b48f218lwd10-libXcomposite-0.4.6/share:/nix/store/1hgjxk3iwa2icx4v1bmdlqlg8p3rmlv2-libXcursor-1.2.3/share:/nix/store/sla268ci60rwld46k62kfbjf8pprm8kn-libXrandr-1.5.4/share:/nix/store/b7hjjr6335dxgafc0r70qaqlldw7nflj-pango-1.55.5-dev/share:/nix/store/vfbwnc5h21hhv2dac5cavh4wzidxklsi-harfbuzz-10.1.0-dev/share:/nix/store/0vdxx9vsgkpczrl4xzkcm6kiw73zrh7p-graphite2-1.3.14/share:/nix/store/ggn93izf7dgzx8nrxq2whhd18svmki3b-libXft-2.3.8/share:/nix/store/mz7sb04w3nw9k5w5pmg1jwi9a1hrifw9-wayland-protocols-1.39/share:/nix/store/vzsclznc5ry5ndhrb79nw4yqjp02w2km-libXinerama-1.1.5/share:/nix/store/yjgn54llrsym7qba75bds34kb8zdy32z-cups-2.4.11-lib/share:/nix/store/5b6fdrx11rq2b2r9m7bnxknh72sj5ndq-cups-2.4.11/share:/nix/store/v5kvchqkly9qkcgfyjzv6xz05xbls87d-gtk+3-3.24.43/share:/nix/store/dzp5h5rm7b4a79612gpvyxqv08hcx6n9-librsvg-2.58.3-dev/share:/nix/store/gcxbz86fjnjsasf3dcp0ap988142mvir-librsvg-2.58.3/share:/nix/store/vdzb7m25r8plq2rs4v71g19hf9qf4qw1-gobject-introspection-wrapped-1.82.0-dev/share:/nix/store/bl9vwzyawyad6ldhvnnp28drzjm7q0v9-patchelf-0.15.0/share:/nix/store/5432m2b9nzij5g0lb2v8i6rj9g1hywdx-gtk+3-3.24.43-dev/share:/nix/store/mlrsq8qld7n4w4kszsvdqjr16zyz5qyq-at-spi2-core-2.54.0-dev/share:/nix/store/jbhdy65rbla5zrkh5rmrsqnrbb5rczzr-glib-2.82.4-dev/share:/nix/store/9sha10y5190i1lfqbc5n611h4xd850ac-gdk-pixbuf-2.42.12-dev/share:/nix/store/27jfvn02kzw8kbhvb2i5g9wbp6pc8c2h-gsettings-desktop-schemas-47.1/share:/nix/store/b7hjjr6335dxgafc0r70qaqlldw7nflj-pango-1.55.5-dev/share:/nix/store/vfbwnc5h21hhv2dac5cavh4wzidxklsi-harfbuzz-10.1.0-dev/share:/nix/store/dzp5h5rm7b4a79612gpvyxqv08hcx6n9-librsvg-2.58.3-dev/share:/nix/store/vdzb7m25r8plq2rs4v71g19hf9qf4qw1-gobject-introspection-wrapped-1.82.0-dev/share:/nix/store/87saq49nzawvc15wxdfmd6g5sa5xn3bj-gobject-introspection-1.82.0-dev/share:/nix/store/fvi2sg9hvai9ik1jvqva2w3683wlxirn-astal-apps-0.1.0-dev/share:/nix/store/bdbamcbviaxpmzf7lvb5vskbc36sjv1b-json-glib-1.10.6-dev/share:/nix/store/nv6bjqrbavdbyv7ygnpdi35hfjxk6jjs-astal-battery-0.1.0-dev/share:/nix/store/n6m0x02vppb97kkqzj2h8digxzllfji5-astal-0.1.0-dev/share:/nix/store/3vgmp4pdycw18yy43wsfsw5mgkh5z0w0-astal-wireplumber-0.1.0-dev/share:/nix/store/wzj8nzja8j6gbvm99w50wzz8v1kkm7s9-wireplumber-0.5.7-dev/share:/nix/store/jhirbxb1ir3vk0kvm67x37cq63ssvbp9-astal-bluetooth-0.1.0-dev/share:/nix/store/kgp6vrwy5l21wz65ws3p4rl213nzgjb1-astal-hyprland-0.1.0-dev/share:/nix/store/jcfhasllbz0vvcvhv83klw7x7vc982vq-astal-mpris-0.1.0-dev/share:/nix/store/x29v9yy3fbyh4m91ppk65mnqa9jfj6kf-astal-network-0.1.0-dev/share:/nix/store/8rh7kinxkkkr26mr8kz8by3659985sll-networkmanager-1.48.10-dev/share:/nix/store/l8scsp3xxlydzwadxl9g4m1nwlxhv4pc-astal-notifd-0.1.0-dev/share:/nix/store/sxy5j98829mzmshw5d0a6g5xprv55a2r-astal-tray-0.1.0-dev/share:/nix/store/v58sy7cdv52jf0mzadgrkxjq6b60vmgs-appmenu-glib-translator-24.05/share:/nix/store/qlxg9h245lwar4lzgcp78m8k1dzpmyyz-astal3-3.0.0-dev/share:/nix/store/l8nl8jfa60nlvw1nc4ng2hzqcgv5lm1l-gtk-layer-shell-0.9.0-dev/share'
export XDG_DATA_DIRS
__structuredAttrs=''
export __structuredAttrs
_substituteStream_has_warned_replace_deprecation='false'
buildInputs='/nix/store/ksb6gs9rl47jby495xbg93ggvi21r1km-dart-sass-1.83.4 /nix/store/fvi2sg9hvai9ik1jvqva2w3683wlxirn-astal-apps-0.1.0-dev /nix/store/nv6bjqrbavdbyv7ygnpdi35hfjxk6jjs-astal-battery-0.1.0-dev /nix/store/n6m0x02vppb97kkqzj2h8digxzllfji5-astal-0.1.0-dev /nix/store/3vgmp4pdycw18yy43wsfsw5mgkh5z0w0-astal-wireplumber-0.1.0-dev /nix/store/jhirbxb1ir3vk0kvm67x37cq63ssvbp9-astal-bluetooth-0.1.0-dev /nix/store/kgp6vrwy5l21wz65ws3p4rl213nzgjb1-astal-hyprland-0.1.0-dev /nix/store/jcfhasllbz0vvcvhv83klw7x7vc982vq-astal-mpris-0.1.0-dev /nix/store/x29v9yy3fbyh4m91ppk65mnqa9jfj6kf-astal-network-0.1.0-dev /nix/store/l8scsp3xxlydzwadxl9g4m1nwlxhv4pc-astal-notifd-0.1.0-dev /nix/store/sxy5j98829mzmshw5d0a6g5xprv55a2r-astal-tray-0.1.0-dev /nix/store/wny3s9glxhiphdqiqyql39zrxkxpir3j-lua-5.2.4-env /nix/store/n6m0x02vppb97kkqzj2h8digxzllfji5-astal-0.1.0-dev /nix/store/qlxg9h245lwar4lzgcp78m8k1dzpmyyz-astal3-3.0.0-dev'
export buildInputs
builder='/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin/bash'
export builder
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/bl9vwzyawyad6ldhvnnp28drzjm7q0v9-patchelf-0.15.0 /nix/store/b4mv6ph8hj4y9qx5xf7zhqyb2fzpqhci-update-autotools-gnu-config-scripts-hook /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh /nix/store/q84p4jvn5yalz937azdrfbyy32kl5s16-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/z7k98578dfzi6l3hsvbivzm7hfqlk0zc-set-source-date-epoch-to-latest.sh /nix/store/pilsssjjdxvdphlg2h19p0bfx5q0jzkn-strip.sh'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=('gettextDataDirsHook' )
declare -a envBuildHostHooks=('gettextDataDirsHook' )
declare -a envBuildTargetHooks=('gettextDataDirsHook' )
declare -a envHostHostHooks=('find_gio_modules' 'make_glib_find_gsettings_schemas' 'findGdkPixbufLoaders' 'make_gobject_introspection_find_gir_files' 'make_glib_find_gsettings_schemas' 'gettextDataDirsHook' 'findGdkPixbufLoaders' 'make_gobject_introspection_find_gir_files' 'gettextDataDirsHook' )
declare -a envHostTargetHooks=('find_gio_modules' 'make_glib_find_gsettings_schemas' 'findGdkPixbufLoaders' 'make_gobject_introspection_find_gir_files' 'make_glib_find_gsettings_schemas' 'gettextDataDirsHook' 'findGdkPixbufLoaders' 'make_gobject_introspection_find_gir_files' 'gettextDataDirsHook' )
declare -a envTargetTargetHooks=('make_glib_find_gsettings_schemas' 'findGdkPixbufLoaders' )
declare -a fixupOutputHooks=('wrapGAppsHook' '_gtkCleanImmodulesCache' 'if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' '_gtkCleanImmodulesCache' '_gtkCleanImmodulesCache' )
declare -a gappsWrapperArgs=('--prefix' 'GIO_EXTRA_MODULES' ':' '/nix/store/lmwh3prfi7p01wx6zvfhwkaggf5lvxkk-dconf-0.40.0-lib/lib/gio/modules' '--prefix' 'GIO_EXTRA_MODULES' ':' '/nix/store/5ajn5k3ma2gaqvwib57zn11041pm7b88-gvfs-1.56.1/lib/gio/modules' '--prefix' 'GIO_EXTRA_MODULES' ':' '/nix/store/lmwh3prfi7p01wx6zvfhwkaggf5lvxkk-dconf-0.40.0-lib/lib/gio/modules' '--prefix' 'GIO_EXTRA_MODULES' ':' '/nix/store/5ajn5k3ma2gaqvwib57zn11041pm7b88-gvfs-1.56.1/lib/gio/modules' )
guess='12'
initialPath='/nix/store/pw26z7msfmv291jq1qpp8bbaprs5hkfk-coreutils-9.5 /nix/store/pvl69q0l5fiiblvsqz3l424617b7lw89-findutils-4.10.0 /nix/store/nyqfk1jvmg3dzbp0n89x7957m3qh4ks4-diffutils-3.10 /nix/store/v93bdqf52x2r2lqijv0f7x3yhylwy957-gnused-4.9 /nix/store/01dri6m7g4bx0kkd39pkgfpzpj3i7y86-gnugrep-3.11 /nix/store/2yvf4zm225q75mkma7914f4k7i0srfmg-gawk-5.3.1 /nix/store/s6zpdhyi00867afvsyg8hf54q5llkffl-gnutar-1.35 /nix/store/3ixlnrilky99c34xw3w69xyx54iahwcr-gzip-1.13 /nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin /nix/store/0lrk3s24y2l74zagz13mv0n7yp8zbqzg-gnumake-4.4.1 /nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37 /nix/store/78z7sr6w7jv856axivb9fxwivklvaivf-patch-2.7.6 /nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin /nix/store/qh8jxbp98py266w8555hx4y9qpxfrfz0-file-5.46'
installPhase='runHook preInstall

mkdir -p $out/bin
cp -r * $out/bin
echo '\''#!/nix/store/wny3s9glxhiphdqiqyql39zrxkxpir3j-lua-5.2.4-env/bin/lua
require "init"
'\'' > astal-lua
install -m 755 astal-lua $out/bin/my-shell

runHook postInstall
'
export installPhase
maybe_dir='/nix/store/5ajn5k3ma2gaqvwib57zn11041pm7b88-gvfs-1.56.1/share/gsettings-schemas/gvfs-1.56.1'
mesonFlags=''
export mesonFlags
name='my-shell-env'
export name
nativeBuildInputs='/nix/store/fv6kal1wcjs0sf4gvf4sf5ga71vwmb49-wrap-gapps-hook /nix/store/vdzb7m25r8plq2rs4v71g19hf9qf4qw1-gobject-introspection-wrapped-1.82.0-dev'
export nativeBuildInputs
out='/home/nico/.dotfiles/astal/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
pkg='/nix/store/pilsssjjdxvdphlg2h19p0bfx5q0jzkn-strip.sh'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/fv6kal1wcjs0sf4gvf4sf5ga71vwmb49-wrap-gapps-hook' '/nix/store/nlbzmpa9h4cmqi4y0926sy7w1l8phgnm-make-binary-wrapper-hook' '/nix/store/5hxqxli1p7d5xgmmqcpxqhzw1if20rdp-die-hook' '/nix/store/5432m2b9nzij5g0lb2v8i6rj9g1hywdx-gtk+3-3.24.43-dev' '/nix/store/mlrsq8qld7n4w4kszsvdqjr16zyz5qyq-at-spi2-core-2.54.0-dev' '/nix/store/blzm4z7bgz1pzrdr1d66a4ghkyqhn72w-dbus-1.14.10-dev' '/nix/store/j2y38dvshlwsscsmjswra1fxssiqkc6z-expat-2.6.4-dev' '/nix/store/85m8a1905jksv2s8xj1hn23dasimih87-expat-2.6.4' '/nix/store/687mdvx2ndxdlbpxyjcjz160qmk3axak-dbus-1.14.10-lib' '/nix/store/sc2vj3101xz24yq1inrjqladw88c5s21-dbus-1.14.10' '/nix/store/jbhdy65rbla5zrkh5rmrsqnrbb5rczzr-glib-2.82.4-dev' '/nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev' '/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1' '/nix/store/bi8vam231yqs9il8rn02fvzrjwlv12vy-libffi-3.4.6-dev' '/nix/store/af26rdavng72z6qi08p52jhg5qynlg7n-libffi-3.4.6' '/nix/store/m4454h58k2jyrpz9r96zby1aid2fv9qd-gettext-0.22.5' '/nix/store/ljxflkd92m8mn42mxbab381q8d8ygc6q-glibc-iconv-2.40' '/nix/store/qb9innj2gpaqv34mw7yddc0b8w7ayhy8-glib-2.82.4-bin' '/nix/store/qap69prdblhm5k4zkrqjk42zifyig2pb-glib-2.82.4' '/nix/store/n20nf5am8arwr72lwq4r68csknb2g4w3-at-spi2-core-2.54.0' '/nix/store/3aa3sws2gxg0jhhchdl2gn0kylxwl4wb-cairo-1.18.2-dev' '/nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev' '/nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev' '/nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev' '/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin' '/nix/store/jhcqdd7rqcl0zxgbxx4m6jz3kd2026yw-bzip2-1.0.8' '/nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev' '/nix/store/mzhn6vgk5g9p63gvzj7pgyia2mfp2glw-brotli-1.1.0-lib' '/nix/store/nf35c6arwgbny5qv956yb369gp3g7xjl-brotli-1.1.0' '/nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev' '/nix/store/m04yfi9gd23mjlwsarcwz955zbz4fgix-libpng-apng-1.6.43' '/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3' '/nix/store/7z9ki4d55828iiqydf190fkbplyn1i12-fontconfig-2.15.0-bin' '/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib' '/nix/store/qvvh4qzs1dbny5gmf52gz35dcdsn39c1-pixman-0.44.2' '/nix/store/4f1ciicjz98rvspax90xpnmhgpqdz004-libXext-1.3.6-dev' '/nix/store/b0w4jcxry1hc1yqfg7g6289jc3j7fwnq-xorgproto-2024.1' '/nix/store/j9z7nck2527gdjc83dlk1qnlpnms2a2z-libXau-1.0.12-dev' '/nix/store/a58z7g7bv4fxfkvaji2s9jnadfgprv44-libXau-1.0.12' '/nix/store/ffgbdyv2lwg1ckfqy4hck7sf1s754k5c-libXext-1.3.6' '/nix/store/a65aaph7lp8k4mgs5c8v17gp3ziigz35-libXrender-0.9.12-dev' '/nix/store/gdkz1760bqdfkz6vvcbbbqi05aiz8bkb-libX11-1.8.10-dev' '/nix/store/61x2m78ylwvw6cva8mpcyk1xqlfysrh6-libxcb-1.17.0-dev' '/nix/store/bhq23djx0l34nxk9w0g7swrghbmkxgw3-libxcb-1.17.0' '/nix/store/36ybrb8mfqbvq0irggdqhd85iqabfmk9-libX11-1.8.10' '/nix/store/20vvfm2rlivlfxgiw9ya8gw5xrx7ln45-libXrender-0.9.12' '/nix/store/ia4lwiczwhg206whjw5yfhfg3h2s4ks7-cairo-1.18.2' '/nix/store/qibs882rm2si3arh7drz5w0jwlmkr4fh-fribidi-1.0.16-dev' '/nix/store/zkm4lblly44srrfsrj0i6lbscvvribir-fribidi-1.0.16' '/nix/store/9sha10y5190i1lfqbc5n611h4xd850ac-gdk-pixbuf-2.42.12-dev' '/nix/store/7g7nsc9570gmz85w0fliycwshl2l8bcw-libtiff-4.7.0-dev' '/nix/store/3mn95s8wl54xyvf9gp1mbg5hmv7f0cp5-libdeflate-1.23' '/nix/store/d9l9hixc9aviw4xriwk4xykycgr57wci-libjpeg-turbo-3.0.4-dev' '/nix/store/qbq5fq550dqnn9r14clvlfdn3bbx0zj7-libjpeg-turbo-3.0.4-bin' '/nix/store/4zq9mzi2g4ld46rsxn2h0s562ij29vyc-libjpeg-turbo-3.0.4' '/nix/store/lry4jjli823qw68xarjlfqf4vx9bzdix-libwebp-1.5.0' '/nix/store/y3pbgrpn0a1az1ya1zyvdc6jq6hnb53y-xz-5.6.3-dev' '/nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin' '/nix/store/z5lfnj2msazj5s9plcrzi3qbfr2xn8da-xz-5.6.3' '/nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev' '/nix/store/sh9j0jqldx78pdi8cw672fm79lbdhs6g-zstd-1.5.6-bin' '/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6' '/nix/store/s3kk6fy51ygkfayhlgqcl4652w8s8ah2-libtiff-4.7.0-bin' '/nix/store/n8z46r30s3a5d9647pxbcadf3mnzw12g-libtiff-4.7.0' '/nix/store/y26w2bicwqhly2cd9y2am0sjmgp577cx-gdk-pixbuf-2.42.12' '/nix/store/27jfvn02kzw8kbhvb2i5g9wbp6pc8c2h-gsettings-desktop-schemas-47.1' '/nix/store/2w5j4wdq24nd78553y8s3xb4arn1wm4i-libICE-1.1.2-dev' '/nix/store/vcsajx7h8jh0yq9sd6509pmlf6n8yppd-libICE-1.1.2' '/nix/store/6ms8l41inlwwgj1k814f5zc4ffwx5piw-libSM-1.2.5-dev' '/nix/store/w9b0c91yq98v4xc4x2pmbdcizwvv1az6-libSM-1.2.5' '/nix/store/dyin228665mmbd7prbdxq8c2sq51qvpq-libXcomposite-0.4.6-dev' '/nix/store/jd45n607lppm4hwbrk710zpvjmm7amp6-libXfixes-6.0.1-dev' '/nix/store/c24k2mkwfm92fch1n5pin26j21kcpd8p-libXfixes-6.0.1' '/nix/store/2prmm1avzc88k03c7345b48f218lwd10-libXcomposite-0.4.6' '/nix/store/3vrpknrh26qbf5dq43rh9h9apibhwz5z-libXcursor-1.2.3-dev' '/nix/store/1hgjxk3iwa2icx4v1bmdlqlg8p3rmlv2-libXcursor-1.2.3' '/nix/store/1xdyd1zy62fimpv8hvyf55pj72dsdswm-libXdamage-1.1.6-dev' '/nix/store/lhivsk7zpqm64drpvjnzndj545xaarwv-libXdamage-1.1.6' '/nix/store/09iv7xydrhl0g9pc9mi5l82iipsmxir2-libXi-1.8.2-dev' '/nix/store/vyk0yikn5cw3nmwz88dwbfqwrbirfamk-libXi-1.8.2' '/nix/store/5qjdl6x7ca90dw4f0jj65xg2lmk82x3k-libXrandr-1.5.4-dev' '/nix/store/sla268ci60rwld46k62kfbjf8pprm8kn-libXrandr-1.5.4' '/nix/store/b7hjjr6335dxgafc0r70qaqlldw7nflj-pango-1.55.5-dev' '/nix/store/vfbwnc5h21hhv2dac5cavh4wzidxklsi-harfbuzz-10.1.0-dev' '/nix/store/i02k7ylxp0l5ycsncz879dpp9vvapmkz-graphite2-1.3.14-dev' '/nix/store/0vdxx9vsgkpczrl4xzkcm6kiw73zrh7p-graphite2-1.3.14' '/nix/store/min54ia8knrqvmq8xi6v6mqs3fydmhp2-harfbuzz-10.1.0' '/nix/store/j1jvfpyv0l2w0q14hik2ivvb1l0qszrd-libXft-2.3.8-dev' '/nix/store/ggn93izf7dgzx8nrxq2whhd18svmki3b-libXft-2.3.8' '/nix/store/lvm7qnl7389i7ilmgavjam52ni39jhs4-pango-1.55.5-bin' '/nix/store/w37y803wqd8lqilhy558ylb3gd78s5ak-pango-1.55.5' '/nix/store/49w5nh9fmi8j2xalx777i0lcvakpwgp0-libglvnd-1.7.0-dev' '/nix/store/rvlpzcdms824wjg8q31bdfvx35z6zf27-libglvnd-1.7.0' '/nix/store/7rm6qlssv445y64sxbg81gbhf8i4pmy2-wayland-1.23.1-dev' '/nix/store/1d6ln69plsmbfp6myvbkx4bf39mg8a47-wayland-1.23.1' '/nix/store/mz7sb04w3nw9k5w5pmg1jwi9a1hrifw9-wayland-protocols-1.39' '/nix/store/7qavdywdbns3ybyr2j4mf91ncms3nabb-libXinerama-1.1.5-dev' '/nix/store/vzsclznc5ry5ndhrb79nw4yqjp02w2km-libXinerama-1.1.5' '/nix/store/bmy9bs4ikr416v6k398y5rqhwm29x2li-cups-2.4.11-dev' '/nix/store/smh6r1iahgh1ns5c9lk3dnn7xifhqvri-gmp-with-cxx-6.3.0-dev' '/nix/store/4yv04mylgabfi1vdnl0cr83q5qax4ch7-gmp-with-cxx-6.3.0' '/nix/store/yjgn54llrsym7qba75bds34kb8zdy32z-cups-2.4.11-lib' '/nix/store/5b6fdrx11rq2b2r9m7bnxknh72sj5ndq-cups-2.4.11' '/nix/store/v5kvchqkly9qkcgfyjzv6xz05xbls87d-gtk+3-3.24.43' '/nix/store/dzp5h5rm7b4a79612gpvyxqv08hcx6n9-librsvg-2.58.3-dev' '/nix/store/gcxbz86fjnjsasf3dcp0ap988142mvir-librsvg-2.58.3' '/nix/store/vdzb7m25r8plq2rs4v71g19hf9qf4qw1-gobject-introspection-wrapped-1.82.0-dev' '/nix/store/dxb8mgx08cqbapdm8ppx39m25f18hfqb-gobject-introspection-wrapped-1.82.0' '/nix/store/bl9vwzyawyad6ldhvnnp28drzjm7q0v9-patchelf-0.15.0' '/nix/store/b4mv6ph8hj4y9qx5xf7zhqyb2fzpqhci-update-autotools-gnu-config-scripts-hook' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh' '/nix/store/q84p4jvn5yalz937azdrfbyy32kl5s16-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/z7k98578dfzi6l3hsvbivzm7hfqlk0zc-set-source-date-epoch-to-latest.sh' '/nix/store/pilsssjjdxvdphlg2h19p0bfx5q0jzkn-strip.sh' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=('/nix/store/dzp5h5rm7b4a79612gpvyxqv08hcx6n9-librsvg-2.58.3-dev' '/nix/store/jbhdy65rbla5zrkh5rmrsqnrbb5rczzr-glib-2.82.4-dev' '/nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev' '/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1' '/nix/store/bi8vam231yqs9il8rn02fvzrjwlv12vy-libffi-3.4.6-dev' '/nix/store/af26rdavng72z6qi08p52jhg5qynlg7n-libffi-3.4.6' '/nix/store/m4454h58k2jyrpz9r96zby1aid2fv9qd-gettext-0.22.5' '/nix/store/ljxflkd92m8mn42mxbab381q8d8ygc6q-glibc-iconv-2.40' '/nix/store/qb9innj2gpaqv34mw7yddc0b8w7ayhy8-glib-2.82.4-bin' '/nix/store/qap69prdblhm5k4zkrqjk42zifyig2pb-glib-2.82.4' '/nix/store/9sha10y5190i1lfqbc5n611h4xd850ac-gdk-pixbuf-2.42.12-dev' '/nix/store/7g7nsc9570gmz85w0fliycwshl2l8bcw-libtiff-4.7.0-dev' '/nix/store/3mn95s8wl54xyvf9gp1mbg5hmv7f0cp5-libdeflate-1.23' '/nix/store/d9l9hixc9aviw4xriwk4xykycgr57wci-libjpeg-turbo-3.0.4-dev' '/nix/store/qbq5fq550dqnn9r14clvlfdn3bbx0zj7-libjpeg-turbo-3.0.4-bin' '/nix/store/4zq9mzi2g4ld46rsxn2h0s562ij29vyc-libjpeg-turbo-3.0.4' '/nix/store/lry4jjli823qw68xarjlfqf4vx9bzdix-libwebp-1.5.0' '/nix/store/y3pbgrpn0a1az1ya1zyvdc6jq6hnb53y-xz-5.6.3-dev' '/nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin' '/nix/store/z5lfnj2msazj5s9plcrzi3qbfr2xn8da-xz-5.6.3' '/nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev' '/nix/store/sh9j0jqldx78pdi8cw672fm79lbdhs6g-zstd-1.5.6-bin' '/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6' '/nix/store/s3kk6fy51ygkfayhlgqcl4652w8s8ah2-libtiff-4.7.0-bin' '/nix/store/n8z46r30s3a5d9647pxbcadf3mnzw12g-libtiff-4.7.0' '/nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev' '/nix/store/m04yfi9gd23mjlwsarcwz955zbz4fgix-libpng-apng-1.6.43' '/nix/store/y26w2bicwqhly2cd9y2am0sjmgp577cx-gdk-pixbuf-2.42.12' '/nix/store/3aa3sws2gxg0jhhchdl2gn0kylxwl4wb-cairo-1.18.2-dev' '/nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev' '/nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev' '/nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev' '/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin' '/nix/store/jhcqdd7rqcl0zxgbxx4m6jz3kd2026yw-bzip2-1.0.8' '/nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev' '/nix/store/mzhn6vgk5g9p63gvzj7pgyia2mfp2glw-brotli-1.1.0-lib' '/nix/store/nf35c6arwgbny5qv956yb369gp3g7xjl-brotli-1.1.0' '/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3' '/nix/store/7z9ki4d55828iiqydf190fkbplyn1i12-fontconfig-2.15.0-bin' '/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib' '/nix/store/qvvh4qzs1dbny5gmf52gz35dcdsn39c1-pixman-0.44.2' '/nix/store/4f1ciicjz98rvspax90xpnmhgpqdz004-libXext-1.3.6-dev' '/nix/store/b0w4jcxry1hc1yqfg7g6289jc3j7fwnq-xorgproto-2024.1' '/nix/store/j9z7nck2527gdjc83dlk1qnlpnms2a2z-libXau-1.0.12-dev' '/nix/store/a58z7g7bv4fxfkvaji2s9jnadfgprv44-libXau-1.0.12' '/nix/store/ffgbdyv2lwg1ckfqy4hck7sf1s754k5c-libXext-1.3.6' '/nix/store/a65aaph7lp8k4mgs5c8v17gp3ziigz35-libXrender-0.9.12-dev' '/nix/store/gdkz1760bqdfkz6vvcbbbqi05aiz8bkb-libX11-1.8.10-dev' '/nix/store/61x2m78ylwvw6cva8mpcyk1xqlfysrh6-libxcb-1.17.0-dev' '/nix/store/bhq23djx0l34nxk9w0g7swrghbmkxgw3-libxcb-1.17.0' '/nix/store/36ybrb8mfqbvq0irggdqhd85iqabfmk9-libX11-1.8.10' '/nix/store/20vvfm2rlivlfxgiw9ya8gw5xrx7ln45-libXrender-0.9.12' '/nix/store/ia4lwiczwhg206whjw5yfhfg3h2s4ks7-cairo-1.18.2' '/nix/store/gcxbz86fjnjsasf3dcp0ap988142mvir-librsvg-2.58.3' '/nix/store/5432m2b9nzij5g0lb2v8i6rj9g1hywdx-gtk+3-3.24.43-dev' '/nix/store/mlrsq8qld7n4w4kszsvdqjr16zyz5qyq-at-spi2-core-2.54.0-dev' '/nix/store/blzm4z7bgz1pzrdr1d66a4ghkyqhn72w-dbus-1.14.10-dev' '/nix/store/j2y38dvshlwsscsmjswra1fxssiqkc6z-expat-2.6.4-dev' '/nix/store/85m8a1905jksv2s8xj1hn23dasimih87-expat-2.6.4' '/nix/store/687mdvx2ndxdlbpxyjcjz160qmk3axak-dbus-1.14.10-lib' '/nix/store/sc2vj3101xz24yq1inrjqladw88c5s21-dbus-1.14.10' '/nix/store/n20nf5am8arwr72lwq4r68csknb2g4w3-at-spi2-core-2.54.0' '/nix/store/qibs882rm2si3arh7drz5w0jwlmkr4fh-fribidi-1.0.16-dev' '/nix/store/zkm4lblly44srrfsrj0i6lbscvvribir-fribidi-1.0.16' '/nix/store/27jfvn02kzw8kbhvb2i5g9wbp6pc8c2h-gsettings-desktop-schemas-47.1' '/nix/store/2w5j4wdq24nd78553y8s3xb4arn1wm4i-libICE-1.1.2-dev' '/nix/store/vcsajx7h8jh0yq9sd6509pmlf6n8yppd-libICE-1.1.2' '/nix/store/6ms8l41inlwwgj1k814f5zc4ffwx5piw-libSM-1.2.5-dev' '/nix/store/w9b0c91yq98v4xc4x2pmbdcizwvv1az6-libSM-1.2.5' '/nix/store/dyin228665mmbd7prbdxq8c2sq51qvpq-libXcomposite-0.4.6-dev' '/nix/store/jd45n607lppm4hwbrk710zpvjmm7amp6-libXfixes-6.0.1-dev' '/nix/store/c24k2mkwfm92fch1n5pin26j21kcpd8p-libXfixes-6.0.1' '/nix/store/2prmm1avzc88k03c7345b48f218lwd10-libXcomposite-0.4.6' '/nix/store/3vrpknrh26qbf5dq43rh9h9apibhwz5z-libXcursor-1.2.3-dev' '/nix/store/1hgjxk3iwa2icx4v1bmdlqlg8p3rmlv2-libXcursor-1.2.3' '/nix/store/1xdyd1zy62fimpv8hvyf55pj72dsdswm-libXdamage-1.1.6-dev' '/nix/store/lhivsk7zpqm64drpvjnzndj545xaarwv-libXdamage-1.1.6' '/nix/store/09iv7xydrhl0g9pc9mi5l82iipsmxir2-libXi-1.8.2-dev' '/nix/store/vyk0yikn5cw3nmwz88dwbfqwrbirfamk-libXi-1.8.2' '/nix/store/5qjdl6x7ca90dw4f0jj65xg2lmk82x3k-libXrandr-1.5.4-dev' '/nix/store/sla268ci60rwld46k62kfbjf8pprm8kn-libXrandr-1.5.4' '/nix/store/b7hjjr6335dxgafc0r70qaqlldw7nflj-pango-1.55.5-dev' '/nix/store/vfbwnc5h21hhv2dac5cavh4wzidxklsi-harfbuzz-10.1.0-dev' '/nix/store/i02k7ylxp0l5ycsncz879dpp9vvapmkz-graphite2-1.3.14-dev' '/nix/store/0vdxx9vsgkpczrl4xzkcm6kiw73zrh7p-graphite2-1.3.14' '/nix/store/min54ia8knrqvmq8xi6v6mqs3fydmhp2-harfbuzz-10.1.0' '/nix/store/j1jvfpyv0l2w0q14hik2ivvb1l0qszrd-libXft-2.3.8-dev' '/nix/store/ggn93izf7dgzx8nrxq2whhd18svmki3b-libXft-2.3.8' '/nix/store/lvm7qnl7389i7ilmgavjam52ni39jhs4-pango-1.55.5-bin' '/nix/store/w37y803wqd8lqilhy558ylb3gd78s5ak-pango-1.55.5' '/nix/store/49w5nh9fmi8j2xalx777i0lcvakpwgp0-libglvnd-1.7.0-dev' '/nix/store/rvlpzcdms824wjg8q31bdfvx35z6zf27-libglvnd-1.7.0' '/nix/store/7rm6qlssv445y64sxbg81gbhf8i4pmy2-wayland-1.23.1-dev' '/nix/store/1d6ln69plsmbfp6myvbkx4bf39mg8a47-wayland-1.23.1' '/nix/store/mz7sb04w3nw9k5w5pmg1jwi9a1hrifw9-wayland-protocols-1.39' '/nix/store/7qavdywdbns3ybyr2j4mf91ncms3nabb-libXinerama-1.1.5-dev' '/nix/store/vzsclznc5ry5ndhrb79nw4yqjp02w2km-libXinerama-1.1.5' '/nix/store/bmy9bs4ikr416v6k398y5rqhwm29x2li-cups-2.4.11-dev' '/nix/store/smh6r1iahgh1ns5c9lk3dnn7xifhqvri-gmp-with-cxx-6.3.0-dev' '/nix/store/4yv04mylgabfi1vdnl0cr83q5qax4ch7-gmp-with-cxx-6.3.0' '/nix/store/yjgn54llrsym7qba75bds34kb8zdy32z-cups-2.4.11-lib' '/nix/store/5b6fdrx11rq2b2r9m7bnxknh72sj5ndq-cups-2.4.11' '/nix/store/v5kvchqkly9qkcgfyjzv6xz05xbls87d-gtk+3-3.24.43' '/nix/store/lmwh3prfi7p01wx6zvfhwkaggf5lvxkk-dconf-0.40.0-lib' '/nix/store/87saq49nzawvc15wxdfmd6g5sa5xn3bj-gobject-introspection-1.82.0-dev' '/nix/store/18fznbkn56msf7ir1bcw258fj6pdc3zf-gobject-introspection-1.82.0' )
declare -a pkgsHostTarget=('/nix/store/ksb6gs9rl47jby495xbg93ggvi21r1km-dart-sass-1.83.4' '/nix/store/fvi2sg9hvai9ik1jvqva2w3683wlxirn-astal-apps-0.1.0-dev' '/nix/store/jbhdy65rbla5zrkh5rmrsqnrbb5rczzr-glib-2.82.4-dev' '/nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev' '/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1' '/nix/store/bi8vam231yqs9il8rn02fvzrjwlv12vy-libffi-3.4.6-dev' '/nix/store/af26rdavng72z6qi08p52jhg5qynlg7n-libffi-3.4.6' '/nix/store/m4454h58k2jyrpz9r96zby1aid2fv9qd-gettext-0.22.5' '/nix/store/ljxflkd92m8mn42mxbab381q8d8ygc6q-glibc-iconv-2.40' '/nix/store/qb9innj2gpaqv34mw7yddc0b8w7ayhy8-glib-2.82.4-bin' '/nix/store/qap69prdblhm5k4zkrqjk42zifyig2pb-glib-2.82.4' '/nix/store/bdbamcbviaxpmzf7lvb5vskbc36sjv1b-json-glib-1.10.6-dev' '/nix/store/psmkmzxj1pkblc3pfizkqp70acf624ja-json-glib-1.10.6' '/nix/store/lpbs46y8s3m023r8w4v6i88rvmwwks4y-astal-apps-0.1.0' '/nix/store/nv6bjqrbavdbyv7ygnpdi35hfjxk6jjs-astal-battery-0.1.0-dev' '/nix/store/m17gs6llxisjxgxlc72z6dslh8s4ipgz-astal-battery-0.1.0' '/nix/store/n6m0x02vppb97kkqzj2h8digxzllfji5-astal-0.1.0-dev' '/nix/store/42fhmy15z8sfgr7i9vi37gny7vsc7mb2-astal-0.1.0' '/nix/store/3vgmp4pdycw18yy43wsfsw5mgkh5z0w0-astal-wireplumber-0.1.0-dev' '/nix/store/wzj8nzja8j6gbvm99w50wzz8v1kkm7s9-wireplumber-0.5.7-dev' '/nix/store/piv7lk1w5yg5qck0vj7w2qmcd5ljpddl-wireplumber-0.5.7' '/nix/store/sawsq7csc7w14l74c08yxx7fz2gxbvpp-astal-wireplumber-0.1.0' '/nix/store/jhirbxb1ir3vk0kvm67x37cq63ssvbp9-astal-bluetooth-0.1.0-dev' '/nix/store/0ix7pq2z91ycdd408az43chfja9l0rdk-astal-bluetooth-0.1.0' '/nix/store/kgp6vrwy5l21wz65ws3p4rl213nzgjb1-astal-hyprland-0.1.0-dev' '/nix/store/icl2r8jfwrvq6inilx92k8b6kn14dcd9-astal-hyprland-0.1.0' '/nix/store/jcfhasllbz0vvcvhv83klw7x7vc982vq-astal-mpris-0.1.0-dev' '/nix/store/5ajn5k3ma2gaqvwib57zn11041pm7b88-gvfs-1.56.1' '/nix/store/fg5f3wsaigd33kyl94frki83wa56yzl5-astal-mpris-0.1.0' '/nix/store/x29v9yy3fbyh4m91ppk65mnqa9jfj6kf-astal-network-0.1.0-dev' '/nix/store/8rh7kinxkkkr26mr8kz8by3659985sll-networkmanager-1.48.10-dev' '/nix/store/0prhkzx16drwn7wv7ykqzfd152cg2c44-gnutls-3.8.6-dev' '/nix/store/zza416w472fzgfykddw0z3wx1wjpasy5-nettle-3.10.1-dev' '/nix/store/smh6r1iahgh1ns5c9lk3dnn7xifhqvri-gmp-with-cxx-6.3.0-dev' '/nix/store/4yv04mylgabfi1vdnl0cr83q5qax4ch7-gmp-with-cxx-6.3.0' '/nix/store/01a5iykz2i6njfv2sl8b507x2sqgz5fb-nettle-3.10.1' '/nix/store/pywswr12z3ik766l7wzqnbhvfs1m53rn-gnutls-3.8.6-bin' '/nix/store/awpvsip0ipcgrn0cf2x04qsmhp39sazz-gnutls-3.8.6' '/nix/store/3n8w2lgskgj315yjcdq62d7di6mvfvwj-libgcrypt-1.10.3-dev' '/nix/store/vl9jrkb95lycp1pnjay4mi44gk9ims6c-libgcrypt-1.10.3-bin' '/nix/store/aysimy1w0drzwk34fkzk8lsrzdidm3ms-libgcrypt-1.10.3-lib' '/nix/store/9hilz8ngmh6i8i1xzrvd6yifdkvw1n4x-networkmanager-1.48.10' '/nix/store/jvg7gpsyvaw5ywgx1h3pwmciwnx5kwrb-astal-network-0.1.0' '/nix/store/l8scsp3xxlydzwadxl9g4m1nwlxhv4pc-astal-notifd-0.1.0-dev' '/nix/store/9sha10y5190i1lfqbc5n611h4xd850ac-gdk-pixbuf-2.42.12-dev' '/nix/store/7g7nsc9570gmz85w0fliycwshl2l8bcw-libtiff-4.7.0-dev' '/nix/store/3mn95s8wl54xyvf9gp1mbg5hmv7f0cp5-libdeflate-1.23' '/nix/store/d9l9hixc9aviw4xriwk4xykycgr57wci-libjpeg-turbo-3.0.4-dev' '/nix/store/qbq5fq550dqnn9r14clvlfdn3bbx0zj7-libjpeg-turbo-3.0.4-bin' '/nix/store/4zq9mzi2g4ld46rsxn2h0s562ij29vyc-libjpeg-turbo-3.0.4' '/nix/store/lry4jjli823qw68xarjlfqf4vx9bzdix-libwebp-1.5.0' '/nix/store/y3pbgrpn0a1az1ya1zyvdc6jq6hnb53y-xz-5.6.3-dev' '/nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin' '/nix/store/z5lfnj2msazj5s9plcrzi3qbfr2xn8da-xz-5.6.3' '/nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev' '/nix/store/sh9j0jqldx78pdi8cw672fm79lbdhs6g-zstd-1.5.6-bin' '/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6' '/nix/store/s3kk6fy51ygkfayhlgqcl4652w8s8ah2-libtiff-4.7.0-bin' '/nix/store/n8z46r30s3a5d9647pxbcadf3mnzw12g-libtiff-4.7.0' '/nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev' '/nix/store/m04yfi9gd23mjlwsarcwz955zbz4fgix-libpng-apng-1.6.43' '/nix/store/y26w2bicwqhly2cd9y2am0sjmgp577cx-gdk-pixbuf-2.42.12' '/nix/store/3ab1anl0rbncfd9rgd4pj0d676svfi6s-astal-notifd-0.1.0' '/nix/store/sxy5j98829mzmshw5d0a6g5xprv55a2r-astal-tray-0.1.0-dev' '/nix/store/v58sy7cdv52jf0mzadgrkxjq6b60vmgs-appmenu-glib-translator-24.05' '/nix/store/p6aigc217qrm4lsmlxrkw29gzsr0yh0w-astal-tray-0.1.0' '/nix/store/wny3s9glxhiphdqiqyql39zrxkxpir3j-lua-5.2.4-env' '/nix/store/qlxg9h245lwar4lzgcp78m8k1dzpmyyz-astal3-3.0.0-dev' '/nix/store/5432m2b9nzij5g0lb2v8i6rj9g1hywdx-gtk+3-3.24.43-dev' '/nix/store/mlrsq8qld7n4w4kszsvdqjr16zyz5qyq-at-spi2-core-2.54.0-dev' '/nix/store/blzm4z7bgz1pzrdr1d66a4ghkyqhn72w-dbus-1.14.10-dev' '/nix/store/j2y38dvshlwsscsmjswra1fxssiqkc6z-expat-2.6.4-dev' '/nix/store/85m8a1905jksv2s8xj1hn23dasimih87-expat-2.6.4' '/nix/store/687mdvx2ndxdlbpxyjcjz160qmk3axak-dbus-1.14.10-lib' '/nix/store/sc2vj3101xz24yq1inrjqladw88c5s21-dbus-1.14.10' '/nix/store/n20nf5am8arwr72lwq4r68csknb2g4w3-at-spi2-core-2.54.0' '/nix/store/3aa3sws2gxg0jhhchdl2gn0kylxwl4wb-cairo-1.18.2-dev' '/nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev' '/nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev' '/nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev' '/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin' '/nix/store/jhcqdd7rqcl0zxgbxx4m6jz3kd2026yw-bzip2-1.0.8' '/nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev' '/nix/store/mzhn6vgk5g9p63gvzj7pgyia2mfp2glw-brotli-1.1.0-lib' '/nix/store/nf35c6arwgbny5qv956yb369gp3g7xjl-brotli-1.1.0' '/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3' '/nix/store/7z9ki4d55828iiqydf190fkbplyn1i12-fontconfig-2.15.0-bin' '/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib' '/nix/store/qvvh4qzs1dbny5gmf52gz35dcdsn39c1-pixman-0.44.2' '/nix/store/4f1ciicjz98rvspax90xpnmhgpqdz004-libXext-1.3.6-dev' '/nix/store/b0w4jcxry1hc1yqfg7g6289jc3j7fwnq-xorgproto-2024.1' '/nix/store/j9z7nck2527gdjc83dlk1qnlpnms2a2z-libXau-1.0.12-dev' '/nix/store/a58z7g7bv4fxfkvaji2s9jnadfgprv44-libXau-1.0.12' '/nix/store/ffgbdyv2lwg1ckfqy4hck7sf1s754k5c-libXext-1.3.6' '/nix/store/a65aaph7lp8k4mgs5c8v17gp3ziigz35-libXrender-0.9.12-dev' '/nix/store/gdkz1760bqdfkz6vvcbbbqi05aiz8bkb-libX11-1.8.10-dev' '/nix/store/61x2m78ylwvw6cva8mpcyk1xqlfysrh6-libxcb-1.17.0-dev' '/nix/store/bhq23djx0l34nxk9w0g7swrghbmkxgw3-libxcb-1.17.0' '/nix/store/36ybrb8mfqbvq0irggdqhd85iqabfmk9-libX11-1.8.10' '/nix/store/20vvfm2rlivlfxgiw9ya8gw5xrx7ln45-libXrender-0.9.12' '/nix/store/ia4lwiczwhg206whjw5yfhfg3h2s4ks7-cairo-1.18.2' '/nix/store/qibs882rm2si3arh7drz5w0jwlmkr4fh-fribidi-1.0.16-dev' '/nix/store/zkm4lblly44srrfsrj0i6lbscvvribir-fribidi-1.0.16' '/nix/store/27jfvn02kzw8kbhvb2i5g9wbp6pc8c2h-gsettings-desktop-schemas-47.1' '/nix/store/2w5j4wdq24nd78553y8s3xb4arn1wm4i-libICE-1.1.2-dev' '/nix/store/vcsajx7h8jh0yq9sd6509pmlf6n8yppd-libICE-1.1.2' '/nix/store/6ms8l41inlwwgj1k814f5zc4ffwx5piw-libSM-1.2.5-dev' '/nix/store/w9b0c91yq98v4xc4x2pmbdcizwvv1az6-libSM-1.2.5' '/nix/store/dyin228665mmbd7prbdxq8c2sq51qvpq-libXcomposite-0.4.6-dev' '/nix/store/jd45n607lppm4hwbrk710zpvjmm7amp6-libXfixes-6.0.1-dev' '/nix/store/c24k2mkwfm92fch1n5pin26j21kcpd8p-libXfixes-6.0.1' '/nix/store/2prmm1avzc88k03c7345b48f218lwd10-libXcomposite-0.4.6' '/nix/store/3vrpknrh26qbf5dq43rh9h9apibhwz5z-libXcursor-1.2.3-dev' '/nix/store/1hgjxk3iwa2icx4v1bmdlqlg8p3rmlv2-libXcursor-1.2.3' '/nix/store/1xdyd1zy62fimpv8hvyf55pj72dsdswm-libXdamage-1.1.6-dev' '/nix/store/lhivsk7zpqm64drpvjnzndj545xaarwv-libXdamage-1.1.6' '/nix/store/09iv7xydrhl0g9pc9mi5l82iipsmxir2-libXi-1.8.2-dev' '/nix/store/vyk0yikn5cw3nmwz88dwbfqwrbirfamk-libXi-1.8.2' '/nix/store/5qjdl6x7ca90dw4f0jj65xg2lmk82x3k-libXrandr-1.5.4-dev' '/nix/store/sla268ci60rwld46k62kfbjf8pprm8kn-libXrandr-1.5.4' '/nix/store/b7hjjr6335dxgafc0r70qaqlldw7nflj-pango-1.55.5-dev' '/nix/store/vfbwnc5h21hhv2dac5cavh4wzidxklsi-harfbuzz-10.1.0-dev' '/nix/store/i02k7ylxp0l5ycsncz879dpp9vvapmkz-graphite2-1.3.14-dev' '/nix/store/0vdxx9vsgkpczrl4xzkcm6kiw73zrh7p-graphite2-1.3.14' '/nix/store/min54ia8knrqvmq8xi6v6mqs3fydmhp2-harfbuzz-10.1.0' '/nix/store/j1jvfpyv0l2w0q14hik2ivvb1l0qszrd-libXft-2.3.8-dev' '/nix/store/ggn93izf7dgzx8nrxq2whhd18svmki3b-libXft-2.3.8' '/nix/store/lvm7qnl7389i7ilmgavjam52ni39jhs4-pango-1.55.5-bin' '/nix/store/w37y803wqd8lqilhy558ylb3gd78s5ak-pango-1.55.5' '/nix/store/49w5nh9fmi8j2xalx777i0lcvakpwgp0-libglvnd-1.7.0-dev' '/nix/store/rvlpzcdms824wjg8q31bdfvx35z6zf27-libglvnd-1.7.0' '/nix/store/7rm6qlssv445y64sxbg81gbhf8i4pmy2-wayland-1.23.1-dev' '/nix/store/1d6ln69plsmbfp6myvbkx4bf39mg8a47-wayland-1.23.1' '/nix/store/mz7sb04w3nw9k5w5pmg1jwi9a1hrifw9-wayland-protocols-1.39' '/nix/store/7qavdywdbns3ybyr2j4mf91ncms3nabb-libXinerama-1.1.5-dev' '/nix/store/vzsclznc5ry5ndhrb79nw4yqjp02w2km-libXinerama-1.1.5' '/nix/store/bmy9bs4ikr416v6k398y5rqhwm29x2li-cups-2.4.11-dev' '/nix/store/yjgn54llrsym7qba75bds34kb8zdy32z-cups-2.4.11-lib' '/nix/store/5b6fdrx11rq2b2r9m7bnxknh72sj5ndq-cups-2.4.11' '/nix/store/v5kvchqkly9qkcgfyjzv6xz05xbls87d-gtk+3-3.24.43' '/nix/store/l8nl8jfa60nlvw1nc4ng2hzqcgv5lm1l-gtk-layer-shell-0.9.0-dev' '/nix/store/3z9rj478wia1nd3a7gihz1f6rkcn9bnq-gtk-layer-shell-0.9.0' '/nix/store/j4p3kyv1kyzl8sz3s10q43f46ba9iyag-astal3-3.0.0' )
declare -a pkgsTargetTarget=()
declare -a postFixupHooks=('_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postInstallHooks=('glibPostInstallHook' 'giDiscoverSelf' 'glibPostInstallHook' 'giDiscoverSelf' 'glibPostInstallHook' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
preConfigurePhases=' updateAutotoolsGnuConfigScriptsPhase'
preFixup='gappsWrapperArgs+=(
  --prefix PATH : "/nix/store/ksb6gs9rl47jby495xbg93ggvi21r1km-dart-sass-1.83.4/bin:/nix/store/lpbs46y8s3m023r8w4v6i88rvmwwks4y-astal-apps-0.1.0/bin:/nix/store/m17gs6llxisjxgxlc72z6dslh8s4ipgz-astal-battery-0.1.0/bin:/nix/store/42fhmy15z8sfgr7i9vi37gny7vsc7mb2-astal-0.1.0/bin:/nix/store/sawsq7csc7w14l74c08yxx7fz2gxbvpp-astal-wireplumber-0.1.0/bin:/nix/store/0ix7pq2z91ycdd408az43chfja9l0rdk-astal-bluetooth-0.1.0/bin:/nix/store/icl2r8jfwrvq6inilx92k8b6kn14dcd9-astal-hyprland-0.1.0/bin:/nix/store/fg5f3wsaigd33kyl94frki83wa56yzl5-astal-mpris-0.1.0/bin:/nix/store/jvg7gpsyvaw5ywgx1h3pwmciwnx5kwrb-astal-network-0.1.0/bin:/nix/store/3ab1anl0rbncfd9rgd4pj0d676svfi6s-astal-notifd-0.1.0/bin:/nix/store/p6aigc217qrm4lsmlxrkw29gzsr0yh0w-astal-tray-0.1.0/bin"
)
'
export preFixup
declare -a preFixupHooks=('_multioutMoveGlibGir' '_moveToShare' '_multioutDocs' '_multioutDevs' '_multioutMoveGlibGir' )
preFixupPhases=' gappsWrapperArgsHook dropIconThemeCache dropIconThemeCache dropIconThemeCache'
preInstallPhases=' glibPreInstallPhase glibPreInstallPhase glibPreInstallPhase'
prefix='/home/nico/.dotfiles/astal/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
role_post=''
shell='/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin/bash'
export shell
src='/nix/store/r60saqcn2ka5s4hira7l3501vbairrqx-astal'
export src
stdenv='/nix/store/gilkdymmqfhmz8yp8d0lbkns5l4fyppk-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    while IFS='' read -r varName; do
        nixTalkativeLog "@${varName}@ -> ${!varName}";
        args+=("--subst-var" "$varName");
    done < <(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }')
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        nixTalkativeLog "calling implicit '$hookName' function hook";
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            nixTalkativeLog "sourcing implicit '$hookName' script hook";
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                nixTalkativeLog "evaling implicit '$hookName' string hook";
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -r --preserve=mode,timestamps --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                ( XZ_OPT="--threads=$NIX_BUILD_CORES" xz -d < "$fn";
                true ) | tar xf - --mode=+w --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --mode=+w --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin Applications Library/Frameworks};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_gtkCleanImmodulesCache ()
{
 
    local f="${prefix:?}/lib/gtk-3.0/3.0.0/immodules.cache";
    if [ -f "$f" ]; then
        sed 's|Created by .*bin/gtk-query-|Created by bin/gtk-query-|' -i "$f";
    fi
}
_logHook ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    local hookKind="$1";
    local hookExpr="$2";
    shift 2;
    if declare -F "$hookExpr" > /dev/null 2>&1; then
        nixTalkativeLog "calling '$hookKind' function hook '$hookExpr'" "$@";
    else
        if type -p "$hookExpr" > /dev/null; then
            nixTalkativeLog "sourcing '$hookKind' script hook '$hookExpr'";
        else
            if [[ "$hookExpr" != "_callImplicitHook"* ]]; then
                local exprToOutput;
                if [[ ${NIX_DEBUG:-0} -ge 5 ]]; then
                    exprToOutput="$hookExpr";
                else
                    local hookExprLine;
                    while IFS= read -r hookExprLine; do
                        hookExprLine="${hookExprLine#"${hookExprLine%%[![:space:]]*}"}";
                        if [[ -n "$hookExprLine" ]]; then
                            exprToOutput+="$hookExprLine\\n ";
                        fi;
                    done <<< "$hookExpr";
                    exprToOutput="${exprToOutput%%\\n }";
                fi;
                nixTalkativeLog "evaling '$hookKind' string hook '$exprToOutput'";
            fi;
        fi;
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "${shareDocName:-}" ]; then
        local confScript="${configureScript:-}";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --oldincludedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutMoveGlibGir ()
{
 
    moveToOutput share/gir-1.0 "${!outputDev}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        nixTalkativeLog "sourcing setup hook '$pkg'";
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        nixTalkativeLog "sourcing setup hook '$pkg/nix-support/setup-hook'";
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addFlags ()
{
 
    local n flag before after var;
    local reenableGlob=0;
    if [[ ! -o noglob ]]; then
        reenableGlob=1;
    fi;
    set -o noglob;
    before=($1) after=($2);
    if (( reenableGlob )); then
        set +o noglob;
    fi;
    var="argv_tmp";
    printf '%s\n' "char **$var = calloc(${#before[@]} + argc + ${#after[@]} + 1, sizeof(*$var));";
    printf '%s\n' "assert($var != NULL);";
    printf '%s\n' "${var}[0] = argv[0];";
    for ((n = 0; n < ${#before[@]}; n += 1))
    do
        flag=$(escapeStringLiteral "${before[n]}");
        printf '%s\n' "${var}[$((n + 1))] = \"$flag\";";
    done;
    printf '%s\n' "for (int i = 1; i < argc; ++i) {";
    printf '%s\n' "    ${var}[${#before[@]} + i] = argv[i];";
    printf '%s\n' "}";
    for ((n = 0; n < ${#after[@]}; n += 1))
    do
        flag=$(escapeStringLiteral "${after[n]}");
        printf '%s\n' "${var}[${#before[@]} + argc + $n] = \"$flag\";";
    done;
    printf '%s\n' "${var}[${#before[@]} + argc + ${#after[@]}] = NULL;";
    printf '%s\n' "argv = $var;"
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
assertExecutable ()
{
 
    local file="$1";
    [[ -f "$file" && -x "$file" ]] || die "Cannot wrap '$file' because it is not an executable file"
}
assertValidEnvName ()
{
 
    case "$1" in 
        *=*)
            printf '\n%s\n' "#error Illegal environment variable name \`$1\` (cannot contain \`=\`)"
        ;;
        "")
            printf '\n%s\n' "#error Environment variable name can't be empty."
        ;;
    esac
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
changeDir ()
{
 
    local dir;
    dir=$(escapeStringLiteral "$1");
    printf '%s' "assert_success(chdir(\"$dir\"));"
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget="check";
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget="test";
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray checkFlags=VERBOSE=y checkFlagsArray checkTarget;
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
concatStringsSep ()
{
 
    local sep="$1";
    local name="$2";
    local type oldifs;
    if type=$(declare -p "$name" 2> /dev/null); then
        local -n nameref="$name";
        case "${type#* }" in 
            -A*)
                echo "concatStringsSep(): ERROR: trying to use concatStringsSep on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                local IFS="$(printf '\036')"
            ;;
            *)
                local IFS=" "
            ;;
        esac;
        local ifs_separated="${nameref[*]}";
        echo -n "${ifs_separated//"$IFS"/"$sep"}";
    fi
}
concatTo ()
{
 
    local -;
    set -o noglob;
    local -n targetref="$1";
    shift;
    local arg default name type;
    for arg in "$@";
    do
        IFS="=" read -r name default <<< "$arg";
        local -n nameref="$name";
        if [[ -z "${nameref[*]}" && -n "$default" ]]; then
            targetref+=("$default");
        else
            if type=$(declare -p "$name" 2> /dev/null); then
                case "${type#* }" in 
                    -A*)
                        echo "concatTo(): ERROR: trying to use concatTo on an associative array." 1>&2;
                        return 1
                    ;;
                    -a*)
                        targetref+=("${nameref[@]}")
                    ;;
                    *)
                        if [[ "$name" = *"Array" ]]; then
                            nixErrorLog "concatTo(): $name is not declared as array, treating as a singleton. This will become an error in future";
                            targetref+=(${nameref+"${nameref[@]}"});
                        else
                            targetref+=(${nameref-});
                        fi
                    ;;
                esac;
            fi;
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
        if [ -z "${dontPatchShebangsInConfigure:-}" ]; then
            patchShebangs --build "$configureScript";
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        concatTo flagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
die ()
{
 
    set +e;
    printf "\nBuilder called die: %b\n" "$*";
    printf "Backtrace:\n";
    local frame=0;
    while caller $frame; do
        ((frame++));
    done;
    printf "\n";
    exit 1
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    concatTo flagsArray distFlags distFlagsArray distTarget=dist;
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
docstring ()
{
 
    printf '%s' "const char * DOCSTRING = \"$(escapeStringLiteral "


# ------------------------------------------------------------------------------------
# The C-code for this binary wrapper has been generated using the following command:


makeCWrapper $(formatArgs "$@")


# (Use \`nix-shell -p makeBinaryWrapper\` to get access to makeCWrapper in your shell)
# ------------------------------------------------------------------------------------


")\";"
}
dropIconThemeCache ()
{
 
    if [[ -z "${dontDropIconThemeCache:-}" ]]; then
        local icondir="${out:?}/share/icons";
        if [[ -d "${icondir}" ]]; then
            find "${icondir}" -name 'icon-theme.cache' -print0 | while IFS= read -r -d '' file; do
                echo "Removing ${file}";
                rm -f "${file}";
            done;
        fi;
    fi
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        { 
            install -m 0600 /dev/null "$NIX_BUILD_TOP/env-vars" && export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars"
        } || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
escapeStringLiteral ()
{
 
    local result;
    result=${1//'\'/'\\'};
    result=${result//\"/'\"'};
    result=${result//'
'/"\n"};
    result=${result//''/"\r"};
    printf '%s' "$result"
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findGdkPixbufLoaders ()
{
 
    local loadersCache="$1/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache";
    if [[ -f "$loadersCache" ]]; then
        if [[ -f "${GDK_PIXBUF_MODULE_FILE-}" ]]; then
            if (( "$(cat "$loadersCache" | wc -l)" > "$(cat "$GDK_PIXBUF_MODULE_FILE" | wc -l)" )); then
                export GDK_PIXBUF_MODULE_FILE="$loadersCache";
            fi;
        else
            export GDK_PIXBUF_MODULE_FILE="$loadersCache";
        fi;
    fi
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case " ${!varSlice-} " in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
find_gio_modules ()
{
 
    if [ -d "$1/lib/gio/modules" ] && [ -n "$(ls -A "$1/lib/gio/modules")" ]; then
        gappsWrapperArgs+=(--prefix GIO_EXTRA_MODULES : "$1/lib/gio/modules");
    fi
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'${search_path:-}'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w,u-s,g-s "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
formatArgs ()
{
 
    printf '%s' "${1@Q}";
    shift;
    while [ $# -gt 0 ]; do
        case "$1" in 
            --set)
                formatArgsLine 2 "$@";
                shift 2
            ;;
            --set-default)
                formatArgsLine 2 "$@";
                shift 2
            ;;
            --unset)
                formatArgsLine 1 "$@";
                shift 1
            ;;
            --prefix)
                formatArgsLine 3 "$@";
                shift 3
            ;;
            --suffix)
                formatArgsLine 3 "$@";
                shift 3
            ;;
            --chdir)
                formatArgsLine 1 "$@";
                shift 1
            ;;
            --add-flags)
                formatArgsLine 1 "$@";
                shift 1
            ;;
            --append-flags)
                formatArgsLine 1 "$@";
                shift 1
            ;;
            --argv0)
                formatArgsLine 1 "$@";
                shift 1
            ;;
            --inherit-argv0)
                formatArgsLine 0 "$@"
            ;;
        esac;
        shift;
    done;
    printf '%s\n' ""
}
formatArgsLine ()
{
 
    local ARG_COUNT LENGTH;
    ARG_COUNT=$1;
    LENGTH=$#;
    shift;
    printf '%s' ' \
    '"$1";
    shift;
    while [ "$ARG_COUNT" -gt $((LENGTH - $# - 2)) ]; do
        printf ' %s' "${1@Q}";
        shift;
    done
}
gappsWrapperArgsHook ()
{
 
    if [ -n "$GDK_PIXBUF_MODULE_FILE" ]; then
        gappsWrapperArgs+=(--set GDK_PIXBUF_MODULE_FILE "$GDK_PIXBUF_MODULE_FILE");
    fi;
    if [ -n "$GSETTINGS_SCHEMAS_PATH" ]; then
        gappsWrapperArgs+=(--prefix XDG_DATA_DIRS : "$GSETTINGS_SCHEMAS_PATH");
    fi;
    if [ -d "${prefix:?}/share" ]; then
        gappsWrapperArgs+=(--prefix XDG_DATA_DIRS : "$prefix/share");
    fi;
    if [ -d "$prefix/lib/gio/modules" ] && [ -n "$(ls -A "$prefix/lib/gio/modules")" ]; then
        gappsWrapperArgs+=(--prefix GIO_EXTRA_MODULES : "$prefix/lib/gio/modules");
    fi;
    for v in ${wrapPrefixVariables:-} GST_PLUGIN_SYSTEM_PATH_1_0 GI_TYPELIB_PATH GRL_PLUGIN_PATH;
    do
        if [ -n "${!v:-}" ]; then
            gappsWrapperArgs+=(--prefix "$v" : "${!v}");
        fi;
    done
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        runPhase "$curPhase";
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "gettext-0.22.5: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_@wrapperName@_TARGET_BUILD_@suffixSalt@=1
        ;;
        0)
            export NIX_@wrapperName@_TARGET_HOST_@suffixSalt@=1
        ;;
        1)
            export NIX_@wrapperName@_TARGET_TARGET_@suffixSalt@=1
        ;;
        *)
            echo "gettext-0.22.5: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
gettextDataDirsHook ()
{
 
    getHostRoleEnvHook;
    if [ -d "$1/share/gettext" ]; then
        addToSearchPath "GETTEXTDATADIRS${role_post}" "$1/share/gettext";
    fi
}
giDiscoverSelf ()
{
 
    if [ -d "$prefix/lib/girepository-1.0" ]; then
        addToSearchPath GI_TYPELIB_PATH $prefix/lib/girepository-1.0;
    fi
}
glibPostInstallHook ()
{
 
    if [ -d "$prefix/share/glib-2.0/schemas" ]; then
        mkdir -p "${!outputLib}/share/gsettings-schemas/$name/glib-2.0";
        mv "$prefix/share/glib-2.0/schemas" "${!outputLib}/share/gsettings-schemas/$name/glib-2.0/";
    fi;
    addToSearchPath GSETTINGS_SCHEMAS_PATH "${!outputLib}/share/gsettings-schemas/$name"
}
glibPreInstallPhase ()
{
 
    makeFlagsArray+=("gsettingsschemadir=${!outputLib}/share/gsettings-schemas/$name/glib-2.0/schemas/")
}
indent4 ()
{
 
    printf '%s' "$1" | awk '{ if ($0 != "") { print "    "$0 } else { print $0 }}'
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
            concatTo flagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray installCheckTarget=installcheck;
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
    concatTo flagsArray makeFlags makeFlagsArray installFlags installFlagsArray installTargets=install;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
makeBinaryWrapper ()
{
 
    local NIX_CFLAGS_COMPILE= NIX_CFLAGS_LINK=;
    local original="$1";
    local wrapper="$2";
    shift 2;
    assertExecutable "$original";
    mkdir -p "$(dirname "$wrapper")";
    makeDocumentedCWrapper "$original" "$@" | /nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116/bin/cc -Wall -Werror -Wpedantic -Wno-overlength-strings -Os -x c -o "$wrapper" -
}
makeCWrapper ()
{
 
    local argv0 inherit_argv0 n params cmd main flagsBefore flagsAfter flags executable length;
    local uses_prefix uses_suffix uses_assert uses_assert_success uses_stdio uses_asprintf;
    local resolve_path;
    executable=$(escapeStringLiteral "$1");
    params=("$@");
    length=${#params[*]};
    for ((n = 1; n < length; n += 1))
    do
        p="${params[n]}";
        case $p in 
            --set)
                cmd=$(setEnv "${params[n + 1]}" "${params[n + 2]}");
                main="$main$cmd"'
';
                n=$((n + 2));
                [ $n -ge "$length" ] && main="$main#error makeCWrapper: $p takes 2 arguments"'
'
            ;;
            --set-default)
                cmd=$(setDefaultEnv "${params[n + 1]}" "${params[n + 2]}");
                main="$main$cmd"'
';
                uses_stdio=1;
                uses_assert_success=1;
                n=$((n + 2));
                [ $n -ge "$length" ] && main="$main#error makeCWrapper: $p takes 2 arguments"'
'
            ;;
            --unset)
                cmd=$(unsetEnv "${params[n + 1]}");
                main="$main$cmd"'
';
                uses_stdio=1;
                uses_assert_success=1;
                n=$((n + 1));
                [ $n -ge "$length" ] && main="$main#error makeCWrapper: $p takes 1 argument"'
'
            ;;
            --prefix)
                cmd=$(setEnvPrefix "${params[n + 1]}" "${params[n + 2]}" "${params[n + 3]}");
                main="$main$cmd"'
';
                uses_prefix=1;
                uses_asprintf=1;
                uses_stdio=1;
                uses_assert_success=1;
                uses_assert=1;
                n=$((n + 3));
                [ $n -ge "$length" ] && main="$main#error makeCWrapper: $p takes 3 arguments"'
'
            ;;
            --suffix)
                cmd=$(setEnvSuffix "${params[n + 1]}" "${params[n + 2]}" "${params[n + 3]}");
                main="$main$cmd"'
';
                uses_suffix=1;
                uses_asprintf=1;
                uses_stdio=1;
                uses_assert_success=1;
                uses_assert=1;
                n=$((n + 3));
                [ $n -ge "$length" ] && main="$main#error makeCWrapper: $p takes 3 arguments"'
'
            ;;
            --chdir)
                cmd=$(changeDir "${params[n + 1]}");
                main="$main$cmd"'
';
                uses_stdio=1;
                uses_assert_success=1;
                n=$((n + 1));
                [ $n -ge "$length" ] && main="$main#error makeCWrapper: $p takes 1 argument"'
'
            ;;
            --add-flags)
                flags="${params[n + 1]}";
                flagsBefore="$flagsBefore $flags";
                uses_assert=1;
                n=$((n + 1));
                [ $n -ge "$length" ] && main="$main#error makeCWrapper: $p takes 1 argument"'
'
            ;;
            --append-flags)
                flags="${params[n + 1]}";
                flagsAfter="$flagsAfter $flags";
                uses_assert=1;
                n=$((n + 1));
                [ $n -ge "$length" ] && main="$main#error makeCWrapper: $p takes 1 argument"'
'
            ;;
            --argv0)
                argv0=$(escapeStringLiteral "${params[n + 1]}");
                inherit_argv0=;
                n=$((n + 1));
                [ $n -ge "$length" ] && main="$main#error makeCWrapper: $p takes 1 argument"'
'
            ;;
            --inherit-argv0)
                inherit_argv0=1
            ;;
            --resolve-argv0)
                uses_stdio=1;
                uses_string=1;
                resolve_argv0=1
            ;;
            *)
                main="$main#error makeCWrapper: Unknown argument ${p}"'
'
            ;;
        esac;
    done;
    [[ -z "$flagsBefore" && -z "$flagsAfter" ]] || main="$main"${main:+'
'}$(addFlags "$flagsBefore" "$flagsAfter")'
''
';
    [ -z "$inherit_argv0" ] && main="${main}argv[0] = \"${argv0:-${executable}}\";"'
';
    [ -z "$resolve_argv0" ] || main="${main}argv[0] = resolve_argv0(argv[0]);"'
';
    main="${main}return execv(\"${executable}\", argv);"'
';
    [ -z "$uses_asprintf" ] || printf '%s\n' "#define _GNU_SOURCE         /* See feature_test_macros(7) */";
    printf '%s\n' "#include <unistd.h>";
    printf '%s\n' "#include <stdlib.h>";
    [ -z "$uses_assert" ] || printf '%s\n' "#include <assert.h>";
    [ -z "$uses_stdio" ] || printf '%s\n' "#include <stdio.h>";
    [ -z "$uses_string" ] || printf '%s\n' "#include <string.h>";
    [ -z "$uses_assert_success" ] || printf '\n%s\n' "#define assert_success(e) do { if ((e) < 0) { perror(#e); abort(); } } while (0)";
    [ -z "$uses_prefix" ] || printf '\n%s\n' "$(setEnvPrefixFn)";
    [ -z "$uses_suffix" ] || printf '\n%s\n' "$(setEnvSuffixFn)";
    [ -z "$resolve_argv0" ] || printf '\n%s\n' "$(resolveArgv0Fn)";
    printf '\n%s' "int main(int argc, char **argv) {";
    printf '\n%s' "$(indent4 "$main")";
    printf '\n%s\n' "}"
}
makeDocumentedCWrapper ()
{
 
    local src docs;
    src=$(makeCWrapper "$@");
    docs=$(docstring "$@");
    printf '%s\n\n' "$src";
    printf '%s\n' "$docs"
}
makeWrapper ()
{
 
    makeBinaryWrapper "$@"
}
make_glib_find_gsettings_schemas ()
{
 
    for maybe_dir in "$1"/share/gsettings-schemas/*;
    do
        if [[ -d "$maybe_dir/glib-2.0/schemas" ]]; then
            addToSearchPath GSETTINGS_SCHEMAS_PATH "$maybe_dir";
        fi;
    done
}
make_gobject_introspection_find_gir_files ()
{
 
    if [ -d "$1/lib/girepository-1.0" ]; then
        addToSearchPath GI_TYPELIB_PATH $1/lib/girepository-1.0;
    fi;
    if [ -d "$1/share/gir-1.0" ]; then
        addToSearchPath XDG_DATA_DIRS $1/share;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
nixChattyLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 5 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixDebugLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 6 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixErrorLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 0 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixInfoLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 3 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixNoticeLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 2 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixTalkativeLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 4 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixVomitLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 7 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixWarnLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 1 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0)
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    concatTo patchesArray patches;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        concatTo flagsArray patchFlags=-p1;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    local update=false;
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            --host)
                pathName=HOST_PATH;
                shift
            ;;
            --build)
                pathName=PATH;
                shift
            ;;
            --update)
                update=true;
                shift
            ;;
            --)
                shift;
                break
            ;;
            -* | --*)
                echo "Unknown option $1 supplied to patchShebangs" 1>&2;
                return 1
            ;;
            *)
                break
            ;;
        esac;
    done;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f" || [ "$oldInterpreterLine" ];
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "${pathName:-}" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                args=${args#* };
                newPath="$(PATH="${!pathName}" type -P "env" || true)";
                args="-S $(PATH="${!pathName}" type -P "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" type -P "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" type -P "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && ( "$update" == true || "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ) ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
resolveArgv0Fn ()
{
 
    printf '%s' "char *resolve_argv0(char *argv0) {
  if (strchr(argv0, '/') != NULL) {
    return argv0;
  }
  char *path = getenv(\"PATH\");
  if (path == NULL) {
    return argv0;
  }
  char *path_copy = strdup(path);
  if (path_copy == NULL) {
    return argv0;
  }
  char *dir = strtok(path_copy, \":\");
  while (dir != NULL) {
    char *candidate = malloc(strlen(dir) + strlen(argv0) + 2);
    if (candidate == NULL) {
      free(path_copy);
      return argv0;
    }
    sprintf(candidate, \"%s/%s\", dir, argv0);
    if (access(candidate, X_OK) == 0) {
      free(path_copy);
      return candidate;
    }
    free(candidate);
    dir = strtok(NULL, \":\");
  }
  free(path_copy);
  return argv0;
}
"
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
runPhase ()
{
 
    local curPhase="$*";
    if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
        return;
    fi;
    showPhaseHeader "$curPhase";
    dumpVars;
    local startTime endTime;
    startTime=$(date +"%s");
    eval "${!curPhase:-$curPhase}";
    endTime=$(date +"%s");
    showPhaseFooter "$curPhase" "$startTime" "$endTime";
    if [ "$curPhase" = unpackPhase ]; then
        [ -n "${sourceRoot:-}" ] && chmod +x -- "${sourceRoot}";
        cd -- "${sourceRoot:-.}";
    fi
}
setDefaultEnv ()
{
 
    local key value;
    key=$(escapeStringLiteral "$1");
    value=$(escapeStringLiteral "$2");
    printf '%s' "assert_success(setenv(\"$key\", \"$value\", 0));";
    assertValidEnvName "$1"
}
setEnv ()
{
 
    local key value;
    key=$(escapeStringLiteral "$1");
    value=$(escapeStringLiteral "$2");
    printf '%s' "putenv(\"$key=$value\");";
    assertValidEnvName "$1"
}
setEnvPrefix ()
{
 
    local env sep val;
    env=$(escapeStringLiteral "$1");
    sep=$(escapeStringLiteral "$2");
    val=$(escapeStringLiteral "$3");
    printf '%s' "set_env_prefix(\"$env\", \"$sep\", \"$val\");";
    assertValidEnvName "$1"
}
setEnvPrefixFn ()
{
 
    printf '%s' "void set_env_prefix(char *env, char *sep, char *prefix) {
    char *existing = getenv(env);
    if (existing) {
        char *val;
        assert_success(asprintf(&val, \"%s%s%s\", prefix, sep, existing));
        assert_success(setenv(env, val, 1));
        free(val);
    } else {
        assert_success(setenv(env, prefix, 1));
    }
}
"
}
setEnvSuffix ()
{
 
    local env sep val;
    env=$(escapeStringLiteral "$1");
    sep=$(escapeStringLiteral "$2");
    val=$(escapeStringLiteral "$3");
    printf '%s' "set_env_suffix(\"$env\", \"$sep\", \"$val\");";
    assertValidEnvName "$1"
}
setEnvSuffixFn ()
{
 
    printf '%s' "void set_env_suffix(char *env, char *sep, char *suffix) {
    char *existing = getenv(env);
    if (existing) {
        char *val;
        assert_success(asprintf(&val, \"%s%s%s\", existing, sep, suffix));
        assert_success(setenv(env, val, 1));
        free(val);
    } else {
        assert_success(setenv(env, suffix, 1));
    }
}
"
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    echo "Running phase: $phase";
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    printf "@nix { \"action\": \"setPhase\", \"phase\": \"%s\" }\n" "$phase" >&"$NIX_LOG_FD"
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local excludeFlags=();
    local pathsNew=;
    [ -z "$cmd" ] && echo "stripDirs: Strip command is empty" 1>&2 && exit 1;
    [ -z "$ranlibCmd" ] && echo "stripDirs: Ranlib command is empty" 1>&2 && exit 1;
    local pattern;
    if [ -n "${stripExclude:-}" ]; then
        for pattern in "${stripExclude[@]}";
        do
            excludeFlags+=(-a '!' '(' -name "$pattern" -o -wholename "$prefix/$pattern" ')');
        done;
    fi;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        local striperr;
        striperr="$(mktemp --tmpdir="$TMPDIR" 'striperr.XXXXXX')";
        find $paths -type f "${excludeFlags[@]}" -a '!' -path "$prefix/lib/debug/*" -printf '%D-%i,%p\0' | sort -t, -k1,1 -u -z | cut -d, -f2- -z | xargs -r -0 -n1 -P "$NIX_BUILD_CORES" -- $cmd $stripFlags 2> "$striperr" || exit_code=$?;
        [[ "$exit_code" = 123 || -z "$exit_code" ]] || ( cat "$striperr" 1>&2 && exit 1 );
        rm "$striperr";
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    if ! [[ "${#fileNames[@]}" -gt 0 ]]; then
        echo "substituteInPlace called without any files to operate on (files must come before options!)" 1>&2;
        return 1;
    fi;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        local replace_mode="$1";
        case "$1" in 
            --replace)
                if ! "$_substituteStream_has_warned_replace_deprecation"; then
                    echo "substituteStream() in derivation $name: WARNING: '--replace' is deprecated, use --replace-{fail,warn,quiet}. ($description)" 1>&2;
                    _substituteStream_has_warned_replace_deprecation=true;
                fi;
                replace_mode='--replace-warn'
            ;&
            --replace-quiet | --replace-warn | --replace-fail)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        if [ "$replace_mode" == --replace-warn ]; then
                            printf "substituteStream() in derivation $name: WARNING: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                        else
                            if [ "$replace_mode" == --replace-fail ]; then
                                printf "substituteStream() in derivation $name: ERROR: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                                return 1;
                            fi;
                        fi;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream() in derivation $name: ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream() in derivation $name: ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream() in derivation $name: ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    concatTo srcsArray srcs;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
unsetEnv ()
{
 
    local key;
    key=$(escapeStringLiteral "$1");
    printf '%s' "assert_success(unsetenv(\"$key\"));";
    assertValidEnvName "$1"
}
updateAutotoolsGnuConfigScriptsPhase ()
{
 
    if [ -n "${dontUpdateAutotoolsGnuConfigScripts-}" ]; then
        return;
    fi;
    for script in config.sub config.guess;
    do
        for f in $(find . -type f -name "$script");
        do
            echo "Updating Autotools / GNU config script to a newer upstream version: $f";
            cp -f "/nix/store/5xw6dvhrg7b9sf9bixnw9b248qg8kpjs-gnu-config-2024-01-01/$script" "$f";
        done;
    done
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    [[ $path == -* ]] && path="./$path";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ "%p"\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
wrapGApp ()
{
 
    local program="$1";
    shift 1;
    wrapProgram "$program" "${gappsWrapperArgs[@]}" "$@"
}
wrapGAppsHook ()
{
 
    [ -z "$wrapGAppsHookHasRun" ] || return 0;
    wrapGAppsHookHasRun=1;
    if [[ -z "${dontWrapGApps:-}" ]]; then
        targetDirsThatExist=();
        targetDirsRealPath=();
        targetDirs=("${prefix}/bin" "${prefix}/libexec");
        for targetDir in "${targetDirs[@]}";
        do
            if [[ -d "${targetDir}" ]]; then
                targetDirsThatExist+=("${targetDir}");
                targetDirsRealPath+=("$(realpath "${targetDir}")/");
                find "${targetDir}" -type f -executable -print0 | while IFS= read -r -d '' file; do
                    echo "Wrapping program '${file}'";
                    wrapGApp "${file}";
                done;
            fi;
        done;
        if [[ ${#targetDirsThatExist[@]} -ne 0 ]]; then
            find "${targetDirsThatExist[@]}" -type l -xtype f -executable -print0 | while IFS= read -r -d '' linkPath; do
                linkPathReal=$(realpath "${linkPath}");
                for targetPath in "${targetDirsRealPath[@]}";
                do
                    if [[ "$linkPathReal" == "$targetPath"* ]]; then
                        echo "Not wrapping link: '$linkPath' (already wrapped)";
                        continue 2;
                    fi;
                done;
                echo "Wrapping link: '$linkPath'";
                wrapGApp "${linkPath}";
            done;
        fi;
    fi
}
wrapProgram ()
{
 
    wrapProgramBinary "$@"
}
wrapProgramBinary ()
{
 
    local prog="$1";
    local hidden;
    assertExecutable "$prog";
    hidden="$(dirname "$prog")/.$(basename "$prog")"-wrapped;
    while [ -e "$hidden" ]; do
        hidden="${hidden}_";
    done;
    mv "$prog" "$hidden";
    makeBinaryWrapper "$hidden" "$prog" --inherit-argv0 "${@:2}"
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "${shellHook:-}"
